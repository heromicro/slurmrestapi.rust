/*
 * Slurm Rest API
 *
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.39
 * Contact: sales@schedmd.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct V0Period0Period39Node {
    #[serde(rename = "architecture", skip_serializing_if = "Option::is_none")]
    pub architecture: Option<String>,
    #[serde(rename = "burstbuffer_network_address", skip_serializing_if = "Option::is_none")]
    pub burstbuffer_network_address: Option<String>,
    #[serde(rename = "boards", skip_serializing_if = "Option::is_none")]
    pub boards: Option<i32>,
    #[serde(rename = "boot_time", skip_serializing_if = "Option::is_none")]
    pub boot_time: Option<i64>,
    #[serde(rename = "cluster_name", skip_serializing_if = "Option::is_none")]
    pub cluster_name: Option<String>,
    #[serde(rename = "cores", skip_serializing_if = "Option::is_none")]
    pub cores: Option<i32>,
    #[serde(rename = "specialized_cores", skip_serializing_if = "Option::is_none")]
    pub specialized_cores: Option<i32>,
    #[serde(rename = "cpu_binding", skip_serializing_if = "Option::is_none")]
    pub cpu_binding: Option<i32>,
    #[serde(rename = "cpu_load", skip_serializing_if = "Option::is_none")]
    pub cpu_load: Option<Box<crate::models::V0Period0Period39Uint32NoVal>>,
    #[serde(rename = "free_mem", skip_serializing_if = "Option::is_none")]
    pub free_mem: Option<Box<crate::models::V0Period0Period39Uint64NoVal>>,
    #[serde(rename = "cpus", skip_serializing_if = "Option::is_none")]
    pub cpus: Option<i32>,
    #[serde(rename = "effective_cpus", skip_serializing_if = "Option::is_none")]
    pub effective_cpus: Option<i32>,
    #[serde(rename = "specialized_cpus", skip_serializing_if = "Option::is_none")]
    pub specialized_cpus: Option<String>,
    #[serde(rename = "energy", skip_serializing_if = "Option::is_none")]
    pub energy: Option<Box<crate::models::V0Period0Period39AcctGatherEnergy>>,
    #[serde(rename = "external_sensors", skip_serializing_if = "Option::is_none")]
    pub external_sensors: Option<Box<crate::models::V0Period0Period39ExtSensorsData>>,
    #[serde(rename = "extra", skip_serializing_if = "Option::is_none")]
    pub extra: Option<String>,
    #[serde(rename = "power", skip_serializing_if = "Option::is_none")]
    pub power: Option<Box<crate::models::V0Period0Period39PowerMgmtData>>,
    #[serde(rename = "features", skip_serializing_if = "Option::is_none")]
    pub features: Option<Vec<String>>,
    #[serde(rename = "active_features", skip_serializing_if = "Option::is_none")]
    pub active_features: Option<Vec<String>>,
    #[serde(rename = "gres", skip_serializing_if = "Option::is_none")]
    pub gres: Option<String>,
    #[serde(rename = "gres_drained", skip_serializing_if = "Option::is_none")]
    pub gres_drained: Option<String>,
    #[serde(rename = "gres_used", skip_serializing_if = "Option::is_none")]
    pub gres_used: Option<String>,
    #[serde(rename = "last_busy", skip_serializing_if = "Option::is_none")]
    pub last_busy: Option<i64>,
    #[serde(rename = "mcs_label", skip_serializing_if = "Option::is_none")]
    pub mcs_label: Option<String>,
    #[serde(rename = "specialized_memory", skip_serializing_if = "Option::is_none")]
    pub specialized_memory: Option<i64>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "next_state_after_reboot", skip_serializing_if = "Option::is_none")]
    pub next_state_after_reboot: Option<Vec<NextStateAfterReboot>>,
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(rename = "hostname", skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<Vec<State>>,
    #[serde(rename = "operating_system", skip_serializing_if = "Option::is_none")]
    pub operating_system: Option<String>,
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    #[serde(rename = "partitions", skip_serializing_if = "Option::is_none")]
    pub partitions: Option<Vec<String>>,
    #[serde(rename = "port", skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    #[serde(rename = "real_memory", skip_serializing_if = "Option::is_none")]
    pub real_memory: Option<i64>,
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    #[serde(rename = "reason_changed_at", skip_serializing_if = "Option::is_none")]
    pub reason_changed_at: Option<i64>,
    #[serde(rename = "reason_set_by_user", skip_serializing_if = "Option::is_none")]
    pub reason_set_by_user: Option<String>,
    #[serde(rename = "resume_after", skip_serializing_if = "Option::is_none")]
    pub resume_after: Option<Box<crate::models::V0Period0Period39Uint64NoVal>>,
    #[serde(rename = "reservation", skip_serializing_if = "Option::is_none")]
    pub reservation: Option<String>,
    #[serde(rename = "alloc_memory", skip_serializing_if = "Option::is_none")]
    pub alloc_memory: Option<i64>,
    #[serde(rename = "alloc_cpus", skip_serializing_if = "Option::is_none")]
    pub alloc_cpus: Option<i32>,
    #[serde(rename = "alloc_idle_cpus", skip_serializing_if = "Option::is_none")]
    pub alloc_idle_cpus: Option<i32>,
    #[serde(rename = "tres_used", skip_serializing_if = "Option::is_none")]
    pub tres_used: Option<String>,
    #[serde(rename = "tres_weighted", skip_serializing_if = "Option::is_none")]
    pub tres_weighted: Option<f64>,
    #[serde(rename = "slurmd_start_time", skip_serializing_if = "Option::is_none")]
    pub slurmd_start_time: Option<i64>,
    #[serde(rename = "sockets", skip_serializing_if = "Option::is_none")]
    pub sockets: Option<i32>,
    #[serde(rename = "threads", skip_serializing_if = "Option::is_none")]
    pub threads: Option<i32>,
    #[serde(rename = "temporary_disk", skip_serializing_if = "Option::is_none")]
    pub temporary_disk: Option<i32>,
    #[serde(rename = "weight", skip_serializing_if = "Option::is_none")]
    pub weight: Option<i32>,
    #[serde(rename = "tres", skip_serializing_if = "Option::is_none")]
    pub tres: Option<String>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

impl V0Period0Period39Node {
    pub fn new() -> V0Period0Period39Node {
        V0Period0Period39Node {
            architecture: None,
            burstbuffer_network_address: None,
            boards: None,
            boot_time: None,
            cluster_name: None,
            cores: None,
            specialized_cores: None,
            cpu_binding: None,
            cpu_load: None,
            free_mem: None,
            cpus: None,
            effective_cpus: None,
            specialized_cpus: None,
            energy: None,
            external_sensors: None,
            extra: None,
            power: None,
            features: None,
            active_features: None,
            gres: None,
            gres_drained: None,
            gres_used: None,
            last_busy: None,
            mcs_label: None,
            specialized_memory: None,
            name: None,
            next_state_after_reboot: None,
            address: None,
            hostname: None,
            state: None,
            operating_system: None,
            owner: None,
            partitions: None,
            port: None,
            real_memory: None,
            comment: None,
            reason: None,
            reason_changed_at: None,
            reason_set_by_user: None,
            resume_after: None,
            reservation: None,
            alloc_memory: None,
            alloc_cpus: None,
            alloc_idle_cpus: None,
            tres_used: None,
            tres_weighted: None,
            slurmd_start_time: None,
            sockets: None,
            threads: None,
            temporary_disk: None,
            weight: None,
            tres: None,
            version: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NextStateAfterReboot {
    #[serde(rename = "INVALID")]
    Invalid,
    #[serde(rename = "UNKNOWN")]
    Unknown,
    #[serde(rename = "DOWN")]
    Down,
    #[serde(rename = "IDLE")]
    Idle,
    #[serde(rename = "ALLOCATED")]
    Allocated,
    #[serde(rename = "ERROR")]
    Error,
    #[serde(rename = "MIXED")]
    Mixed,
    #[serde(rename = "FUTURE")]
    Future,
    #[serde(rename = "PERFCTRS")]
    Perfctrs,
    #[serde(rename = "RESERVED")]
    Reserved,
    #[serde(rename = "UNDRAIN")]
    Undrain,
    #[serde(rename = "CLOUD")]
    Cloud,
    #[serde(rename = "RESUME")]
    Resume,
    #[serde(rename = "DRAIN")]
    Drain,
    #[serde(rename = "COMPLETING")]
    Completing,
    #[serde(rename = "NOT_RESPONDING")]
    NotResponding,
    #[serde(rename = "POWERED_DOWN")]
    PoweredDown,
    #[serde(rename = "FAIL")]
    Fail,
    #[serde(rename = "POWERING_UP")]
    PoweringUp,
    #[serde(rename = "MAINTENANCE")]
    Maintenance,
    #[serde(rename = "REBOOT_REQUESTED")]
    RebootRequested,
    #[serde(rename = "REBOOT_CANCELED")]
    RebootCanceled,
    #[serde(rename = "POWERING_DOWN")]
    PoweringDown,
    #[serde(rename = "DYNAMIC_FUTURE")]
    DynamicFuture,
    #[serde(rename = "REBOOT_ISSUED")]
    RebootIssued,
    #[serde(rename = "PLANNED")]
    Planned,
    #[serde(rename = "INVALID_REG")]
    InvalidReg,
    #[serde(rename = "POWER_DOWN")]
    PowerDown,
    #[serde(rename = "POWER_UP")]
    PowerUp,
    #[serde(rename = "POWER_DRAIN")]
    PowerDrain,
    #[serde(rename = "DYNAMIC_NORM")]
    DynamicNorm,
}

impl Default for NextStateAfterReboot {
    fn default() -> NextStateAfterReboot {
        Self::Invalid
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "INVALID")]
    Invalid,
    #[serde(rename = "UNKNOWN")]
    Unknown,
    #[serde(rename = "DOWN")]
    Down,
    #[serde(rename = "IDLE")]
    Idle,
    #[serde(rename = "ALLOCATED")]
    Allocated,
    #[serde(rename = "ERROR")]
    Error,
    #[serde(rename = "MIXED")]
    Mixed,
    #[serde(rename = "FUTURE")]
    Future,
    #[serde(rename = "PERFCTRS")]
    Perfctrs,
    #[serde(rename = "RESERVED")]
    Reserved,
    #[serde(rename = "UNDRAIN")]
    Undrain,
    #[serde(rename = "CLOUD")]
    Cloud,
    #[serde(rename = "RESUME")]
    Resume,
    #[serde(rename = "DRAIN")]
    Drain,
    #[serde(rename = "COMPLETING")]
    Completing,
    #[serde(rename = "NOT_RESPONDING")]
    NotResponding,
    #[serde(rename = "POWERED_DOWN")]
    PoweredDown,
    #[serde(rename = "FAIL")]
    Fail,
    #[serde(rename = "POWERING_UP")]
    PoweringUp,
    #[serde(rename = "MAINTENANCE")]
    Maintenance,
    #[serde(rename = "REBOOT_REQUESTED")]
    RebootRequested,
    #[serde(rename = "REBOOT_CANCELED")]
    RebootCanceled,
    #[serde(rename = "POWERING_DOWN")]
    PoweringDown,
    #[serde(rename = "DYNAMIC_FUTURE")]
    DynamicFuture,
    #[serde(rename = "REBOOT_ISSUED")]
    RebootIssued,
    #[serde(rename = "PLANNED")]
    Planned,
    #[serde(rename = "INVALID_REG")]
    InvalidReg,
    #[serde(rename = "POWER_DOWN")]
    PowerDown,
    #[serde(rename = "POWER_UP")]
    PowerUp,
    #[serde(rename = "POWER_DRAIN")]
    PowerDrain,
    #[serde(rename = "DYNAMIC_NORM")]
    DynamicNorm,
}

impl Default for State {
    fn default() -> State {
        Self::Invalid
    }
}

