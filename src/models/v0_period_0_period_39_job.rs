/*
 * Slurm Rest API
 *
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.39
 * Contact: sales@schedmd.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct V0Period0Period39Job {
    #[serde(rename = "account", skip_serializing_if = "Option::is_none")]
    pub account: Option<String>,
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<Box<crate::models::V0039JobComment>>,
    #[serde(rename = "allocation_nodes", skip_serializing_if = "Option::is_none")]
    pub allocation_nodes: Option<i32>,
    #[serde(rename = "array", skip_serializing_if = "Option::is_none")]
    pub array: Option<Box<crate::models::V0039JobArray>>,
    #[serde(rename = "association", skip_serializing_if = "Option::is_none")]
    pub association: Option<Box<crate::models::V0Period0Period39AssocShort>>,
    #[serde(rename = "block", skip_serializing_if = "Option::is_none")]
    pub block: Option<String>,
    #[serde(rename = "cluster", skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    #[serde(rename = "constraints", skip_serializing_if = "Option::is_none")]
    pub constraints: Option<String>,
    #[serde(rename = "container", skip_serializing_if = "Option::is_none")]
    pub container: Option<String>,
    #[serde(rename = "derived_exit_code", skip_serializing_if = "Option::is_none")]
    pub derived_exit_code: Option<Box<crate::models::V0Period0Period39JobExitCode>>,
    #[serde(rename = "time", skip_serializing_if = "Option::is_none")]
    pub time: Option<Box<crate::models::V0039JobTime>>,
    #[serde(rename = "exit_code", skip_serializing_if = "Option::is_none")]
    pub exit_code: Option<Box<crate::models::V0Period0Period39JobExitCode>>,
    #[serde(rename = "extra", skip_serializing_if = "Option::is_none")]
    pub extra: Option<String>,
    #[serde(rename = "failed_node", skip_serializing_if = "Option::is_none")]
    pub failed_node: Option<String>,
    #[serde(rename = "flags", skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<Flags>>,
    #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(rename = "het", skip_serializing_if = "Option::is_none")]
    pub het: Option<Box<crate::models::V0039JobHet>>,
    #[serde(rename = "job_id", skip_serializing_if = "Option::is_none")]
    pub job_id: Option<i32>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "licenses", skip_serializing_if = "Option::is_none")]
    pub licenses: Option<String>,
    #[serde(rename = "mcs", skip_serializing_if = "Option::is_none")]
    pub mcs: Option<Box<crate::models::V0039JobMcs>>,
    #[serde(rename = "nodes", skip_serializing_if = "Option::is_none")]
    pub nodes: Option<String>,
    #[serde(rename = "partition", skip_serializing_if = "Option::is_none")]
    pub partition: Option<String>,
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<Box<crate::models::V0Period0Period39Uint32NoVal>>,
    #[serde(rename = "qos", skip_serializing_if = "Option::is_none")]
    pub qos: Option<String>,
    #[serde(rename = "required", skip_serializing_if = "Option::is_none")]
    pub required: Option<Box<crate::models::V0039JobRequired>>,
    #[serde(rename = "kill_request_user", skip_serializing_if = "Option::is_none")]
    pub kill_request_user: Option<String>,
    #[serde(rename = "reservation", skip_serializing_if = "Option::is_none")]
    pub reservation: Option<Box<crate::models::V0039JobReservation>>,
    #[serde(rename = "script", skip_serializing_if = "Option::is_none")]
    pub script: Option<String>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<Box<crate::models::V0039JobState>>,
    #[serde(rename = "steps", skip_serializing_if = "Option::is_none")]
    pub steps: Option<Vec<crate::models::V0Period0Period39Step>>,
    #[serde(rename = "submit_line", skip_serializing_if = "Option::is_none")]
    pub submit_line: Option<String>,
    #[serde(rename = "tres", skip_serializing_if = "Option::is_none")]
    pub tres: Option<Box<crate::models::V0039JobTres>>,
    #[serde(rename = "used_gres", skip_serializing_if = "Option::is_none")]
    pub used_gres: Option<String>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(rename = "wckey", skip_serializing_if = "Option::is_none")]
    pub wckey: Option<Box<crate::models::V0Period0Period39WckeyTag>>,
    #[serde(rename = "working_directory", skip_serializing_if = "Option::is_none")]
    pub working_directory: Option<String>,
}

impl V0Period0Period39Job {
    pub fn new() -> V0Period0Period39Job {
        V0Period0Period39Job {
            account: None,
            comment: None,
            allocation_nodes: None,
            array: None,
            association: None,
            block: None,
            cluster: None,
            constraints: None,
            container: None,
            derived_exit_code: None,
            time: None,
            exit_code: None,
            extra: None,
            failed_node: None,
            flags: None,
            group: None,
            het: None,
            job_id: None,
            name: None,
            licenses: None,
            mcs: None,
            nodes: None,
            partition: None,
            priority: None,
            qos: None,
            required: None,
            kill_request_user: None,
            reservation: None,
            script: None,
            state: None,
            steps: None,
            submit_line: None,
            tres: None,
            used_gres: None,
            user: None,
            wckey: None,
            working_directory: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Flags {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "CLEAR_SCHEDULING")]
    ClearScheduling,
    #[serde(rename = "NOT_SET")]
    NotSet,
    #[serde(rename = "STARTED_ON_SUBMIT")]
    StartedOnSubmit,
    #[serde(rename = "STARTED_ON_SCHEDULE")]
    StartedOnSchedule,
    #[serde(rename = "STARTED_ON_BACKFILL")]
    StartedOnBackfill,
}

impl Default for Flags {
    fn default() -> Flags {
        Self::None
    }
}

