/*
 * Slurm Rest API
 *
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.38
 * Contact: sales@schedmd.com
 * Generated by: https://openapi-generator.tech
 */

/// Dbv0Period0Period38Job : Single job description



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Dbv0Period0Period38Job {
    /// Account charged by job
    #[serde(rename = "account", skip_serializing_if = "Option::is_none")]
    pub account: Option<String>,
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<Box<crate::models::Dbv0038JobComment>>,
    /// Nodes allocated to job
    #[serde(rename = "allocation_nodes", skip_serializing_if = "Option::is_none")]
    pub allocation_nodes: Option<String>,
    #[serde(rename = "array", skip_serializing_if = "Option::is_none")]
    pub array: Option<Box<crate::models::Dbv0038JobArray>>,
    #[serde(rename = "time", skip_serializing_if = "Option::is_none")]
    pub time: Option<Box<crate::models::Dbv0038JobTime>>,
    #[serde(rename = "association", skip_serializing_if = "Option::is_none")]
    pub association: Option<Box<crate::models::Dbv0Period0Period38AssociationShortInfo>>,
    /// Assigned cluster
    #[serde(rename = "cluster", skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// Constraints on job
    #[serde(rename = "constraints", skip_serializing_if = "Option::is_none")]
    pub constraints: Option<String>,
    #[serde(rename = "derived_exit_code", skip_serializing_if = "Option::is_none")]
    pub derived_exit_code: Option<Box<crate::models::Dbv0Period0Period38JobExitCode>>,
    #[serde(rename = "exit_code", skip_serializing_if = "Option::is_none")]
    pub exit_code: Option<Box<crate::models::Dbv0Period0Period38JobExitCode>>,
    /// List of properties of job
    #[serde(rename = "flags", skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    /// User's group to run job
    #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(rename = "het", skip_serializing_if = "Option::is_none")]
    pub het: Option<Box<crate::models::Dbv0038JobHet>>,
    /// Job id
    #[serde(rename = "job_id", skip_serializing_if = "Option::is_none")]
    pub job_id: Option<i32>,
    /// Assigned job name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "mcs", skip_serializing_if = "Option::is_none")]
    pub mcs: Option<Box<crate::models::Dbv0038JobMcs>>,
    /// List of nodes allocated for job
    #[serde(rename = "nodes", skip_serializing_if = "Option::is_none")]
    pub nodes: Option<String>,
    /// Assigned job's partition
    #[serde(rename = "partition", skip_serializing_if = "Option::is_none")]
    pub partition: Option<String>,
    /// Priority
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<i32>,
    /// Assigned qos name
    #[serde(rename = "qos", skip_serializing_if = "Option::is_none")]
    pub qos: Option<String>,
    #[serde(rename = "required", skip_serializing_if = "Option::is_none")]
    pub required: Option<Box<crate::models::Dbv0038JobRequired>>,
    /// User who requested job killed
    #[serde(rename = "kill_request_user", skip_serializing_if = "Option::is_none")]
    pub kill_request_user: Option<String>,
    #[serde(rename = "reservation", skip_serializing_if = "Option::is_none")]
    pub reservation: Option<Box<crate::models::Dbv0038JobReservation>>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<Box<crate::models::Dbv0038JobState>>,
    /// Job step description
    #[serde(rename = "steps", skip_serializing_if = "Option::is_none")]
    pub steps: Option<Vec<crate::models::Dbv0Period0Period38JobStep>>,
    #[serde(rename = "tres", skip_serializing_if = "Option::is_none")]
    pub tres: Option<Box<crate::models::Dbv0038JobTres>>,
    /// Job user
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(rename = "wckey", skip_serializing_if = "Option::is_none")]
    pub wckey: Option<Box<crate::models::Dbv0038JobWckey>>,
    /// Directory where job was initially started
    #[serde(rename = "working_directory", skip_serializing_if = "Option::is_none")]
    pub working_directory: Option<String>,
    /// absolute path to OCI container bundle
    #[serde(rename = "container", skip_serializing_if = "Option::is_none")]
    pub container: Option<String>,
}

impl Dbv0Period0Period38Job {
    /// Single job description
    pub fn new() -> Dbv0Period0Period38Job {
        Dbv0Period0Period38Job {
            account: None,
            comment: None,
            allocation_nodes: None,
            array: None,
            time: None,
            association: None,
            cluster: None,
            constraints: None,
            derived_exit_code: None,
            exit_code: None,
            flags: None,
            group: None,
            het: None,
            job_id: None,
            name: None,
            mcs: None,
            nodes: None,
            partition: None,
            priority: None,
            qos: None,
            required: None,
            kill_request_user: None,
            reservation: None,
            state: None,
            steps: None,
            tres: None,
            user: None,
            wckey: None,
            working_directory: None,
            container: None,
        }
    }
}


