/*
 * Slurm Rest API
 *
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.37
 * Contact: sales@schedmd.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct V0Period0Period37JobResponseProperties {
    /// Charge resources used by this job to specified account
    #[serde(rename = "account", skip_serializing_if = "Option::is_none")]
    pub account: Option<String>,
    /// time job is eligible for running
    #[serde(rename = "accrue_time", skip_serializing_if = "Option::is_none")]
    pub accrue_time: Option<i64>,
    /// administrator's arbitrary comment
    #[serde(rename = "admin_comment", skip_serializing_if = "Option::is_none")]
    pub admin_comment: Option<String>,
    /// job_id of a job array or 0 if N/A
    #[serde(rename = "array_job_id", skip_serializing_if = "Option::is_none")]
    pub array_job_id: Option<String>,
    /// task_id of a job array
    #[serde(rename = "array_task_id", skip_serializing_if = "Option::is_none")]
    pub array_task_id: Option<String>,
    /// Maximum number of running array tasks
    #[serde(rename = "array_max_tasks", skip_serializing_if = "Option::is_none")]
    pub array_max_tasks: Option<String>,
    /// string expression of task IDs in this record
    #[serde(rename = "array_task_string", skip_serializing_if = "Option::is_none")]
    pub array_task_string: Option<String>,
    /// association id for job
    #[serde(rename = "association_id", skip_serializing_if = "Option::is_none")]
    pub association_id: Option<String>,
    /// features required for batch script's node
    #[serde(rename = "batch_features", skip_serializing_if = "Option::is_none")]
    pub batch_features: Option<String>,
    /// if batch: queued job with script
    #[serde(rename = "batch_flag", skip_serializing_if = "Option::is_none")]
    pub batch_flag: Option<bool>,
    /// name of host running batch script
    #[serde(rename = "batch_host", skip_serializing_if = "Option::is_none")]
    pub batch_host: Option<String>,
    /// Job flags
    #[serde(rename = "flags", skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    /// burst buffer specifications
    #[serde(rename = "burst_buffer", skip_serializing_if = "Option::is_none")]
    pub burst_buffer: Option<String>,
    /// burst buffer state info
    #[serde(rename = "burst_buffer_state", skip_serializing_if = "Option::is_none")]
    pub burst_buffer_state: Option<String>,
    /// name of cluster that the job is on
    #[serde(rename = "cluster", skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// comma separated list of required cluster features
    #[serde(rename = "cluster_features", skip_serializing_if = "Option::is_none")]
    pub cluster_features: Option<String>,
    /// command to be executed
    #[serde(rename = "command", skip_serializing_if = "Option::is_none")]
    pub command: Option<String>,
    /// arbitrary comment
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    /// job requires contiguous nodes
    #[serde(rename = "contiguous", skip_serializing_if = "Option::is_none")]
    pub contiguous: Option<bool>,
    /// specialized core count
    #[serde(rename = "core_spec", skip_serializing_if = "Option::is_none")]
    pub core_spec: Option<String>,
    /// specialized thread count
    #[serde(rename = "thread_spec", skip_serializing_if = "Option::is_none")]
    pub thread_spec: Option<String>,
    /// cores per socket required by job
    #[serde(rename = "cores_per_socket", skip_serializing_if = "Option::is_none")]
    pub cores_per_socket: Option<String>,
    /// billable TRES
    #[serde(rename = "billable_tres", skip_serializing_if = "Option::is_none")]
    pub billable_tres: Option<String>,
    /// number of processors required for each task
    #[serde(rename = "cpus_per_task", skip_serializing_if = "Option::is_none")]
    pub cpus_per_task: Option<String>,
    /// Minimum cpu frequency
    #[serde(rename = "cpu_frequency_minimum", skip_serializing_if = "Option::is_none")]
    pub cpu_frequency_minimum: Option<String>,
    /// Maximum cpu frequency
    #[serde(rename = "cpu_frequency_maximum", skip_serializing_if = "Option::is_none")]
    pub cpu_frequency_maximum: Option<String>,
    /// cpu frequency governor
    #[serde(rename = "cpu_frequency_governor", skip_serializing_if = "Option::is_none")]
    pub cpu_frequency_governor: Option<String>,
    /// semicolon delimited list of TRES=# values
    #[serde(rename = "cpus_per_tres", skip_serializing_if = "Option::is_none")]
    pub cpus_per_tres: Option<String>,
    /// job start deadline 
    #[serde(rename = "deadline", skip_serializing_if = "Option::is_none")]
    pub deadline: Option<String>,
    /// command to be executed
    #[serde(rename = "delay_boot", skip_serializing_if = "Option::is_none")]
    pub delay_boot: Option<String>,
    /// synchronize job execution with other jobs
    #[serde(rename = "dependency", skip_serializing_if = "Option::is_none")]
    pub dependency: Option<String>,
    /// highest exit code of all job steps
    #[serde(rename = "derived_exit_code", skip_serializing_if = "Option::is_none")]
    pub derived_exit_code: Option<String>,
    /// time job is eligible for running
    #[serde(rename = "eligible_time", skip_serializing_if = "Option::is_none")]
    pub eligible_time: Option<i64>,
    /// time of termination, actual or expected
    #[serde(rename = "end_time", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<i64>,
    /// comma separated list of excluded nodes
    #[serde(rename = "excluded_nodes", skip_serializing_if = "Option::is_none")]
    pub excluded_nodes: Option<String>,
    /// exit code for job
    #[serde(rename = "exit_code", skip_serializing_if = "Option::is_none")]
    pub exit_code: Option<i32>,
    /// comma separated list of required features
    #[serde(rename = "features", skip_serializing_if = "Option::is_none")]
    pub features: Option<String>,
    /// Origin cluster's name
    #[serde(rename = "federation_origin", skip_serializing_if = "Option::is_none")]
    pub federation_origin: Option<String>,
    /// string of active sibling names
    #[serde(rename = "federation_siblings_active", skip_serializing_if = "Option::is_none")]
    pub federation_siblings_active: Option<String>,
    /// string of viable sibling names
    #[serde(rename = "federation_siblings_viable", skip_serializing_if = "Option::is_none")]
    pub federation_siblings_viable: Option<String>,
    /// Job flags
    #[serde(rename = "gres_detail", skip_serializing_if = "Option::is_none")]
    pub gres_detail: Option<Vec<String>>,
    /// group job submitted as
    #[serde(rename = "group_id", skip_serializing_if = "Option::is_none")]
    pub group_id: Option<String>,
    /// job ID
    #[serde(rename = "job_id", skip_serializing_if = "Option::is_none")]
    pub job_id: Option<String>,
    #[serde(rename = "job_resources", skip_serializing_if = "Option::is_none")]
    pub job_resources: Option<Box<crate::models::V0Period0Period37JobResources>>,
    /// state of the job
    #[serde(rename = "job_state", skip_serializing_if = "Option::is_none")]
    pub job_state: Option<String>,
    /// last time job was evaluated for scheduling
    #[serde(rename = "last_sched_evaluation", skip_serializing_if = "Option::is_none")]
    pub last_sched_evaluation: Option<String>,
    /// licenses required by the job
    #[serde(rename = "licenses", skip_serializing_if = "Option::is_none")]
    pub licenses: Option<String>,
    /// maximum number of cpus usable by job
    #[serde(rename = "max_cpus", skip_serializing_if = "Option::is_none")]
    pub max_cpus: Option<String>,
    /// maximum number of nodes usable by job
    #[serde(rename = "max_nodes", skip_serializing_if = "Option::is_none")]
    pub max_nodes: Option<String>,
    /// mcs_label if mcs plugin in use
    #[serde(rename = "mcs_label", skip_serializing_if = "Option::is_none")]
    pub mcs_label: Option<String>,
    /// semicolon delimited list of TRES=# values
    #[serde(rename = "memory_per_tres", skip_serializing_if = "Option::is_none")]
    pub memory_per_tres: Option<String>,
    /// name of the job
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// list of nodes allocated to job
    #[serde(rename = "nodes", skip_serializing_if = "Option::is_none")]
    pub nodes: Option<String>,
    /// requested priority change
    #[serde(rename = "nice", skip_serializing_if = "Option::is_none")]
    pub nice: Option<String>,
    /// number of tasks to invoke on each core
    #[serde(rename = "tasks_per_core", skip_serializing_if = "Option::is_none")]
    pub tasks_per_core: Option<String>,
    /// number of tasks to invoke on each socket
    #[serde(rename = "tasks_per_socket", skip_serializing_if = "Option::is_none")]
    pub tasks_per_socket: Option<String>,
    /// number of tasks to invoke on each board
    #[serde(rename = "tasks_per_board", skip_serializing_if = "Option::is_none")]
    pub tasks_per_board: Option<String>,
    /// minimum number of cpus required by job
    #[serde(rename = "cpus", skip_serializing_if = "Option::is_none")]
    pub cpus: Option<String>,
    /// minimum number of nodes required by job
    #[serde(rename = "node_count", skip_serializing_if = "Option::is_none")]
    pub node_count: Option<String>,
    /// requested task count
    #[serde(rename = "tasks", skip_serializing_if = "Option::is_none")]
    pub tasks: Option<String>,
    /// job ID of hetjob leader
    #[serde(rename = "het_job_id", skip_serializing_if = "Option::is_none")]
    pub het_job_id: Option<String>,
    /// job IDs for all components
    #[serde(rename = "het_job_id_set", skip_serializing_if = "Option::is_none")]
    pub het_job_id_set: Option<String>,
    /// HetJob component offset from leader
    #[serde(rename = "het_job_offset", skip_serializing_if = "Option::is_none")]
    pub het_job_offset: Option<String>,
    /// name of assigned partition
    #[serde(rename = "partition", skip_serializing_if = "Option::is_none")]
    pub partition: Option<String>,
    /// minimum real memory per node
    #[serde(rename = "memory_per_node", skip_serializing_if = "Option::is_none")]
    pub memory_per_node: Option<String>,
    /// minimum real memory per cpu
    #[serde(rename = "memory_per_cpu", skip_serializing_if = "Option::is_none")]
    pub memory_per_cpu: Option<String>,
    /// minimum # CPUs per node
    #[serde(rename = "minimum_cpus_per_node", skip_serializing_if = "Option::is_none")]
    pub minimum_cpus_per_node: Option<String>,
    /// minimum tmp disk per node
    #[serde(rename = "minimum_tmp_disk_per_node", skip_serializing_if = "Option::is_none")]
    pub minimum_tmp_disk_per_node: Option<String>,
    /// preemption signal time
    #[serde(rename = "preempt_time", skip_serializing_if = "Option::is_none")]
    pub preempt_time: Option<i64>,
    /// time job ran prior to last suspend
    #[serde(rename = "pre_sus_time", skip_serializing_if = "Option::is_none")]
    pub pre_sus_time: Option<i64>,
    /// relative priority of the job
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<String>,
    /// Job profiling requested
    #[serde(rename = "profile", skip_serializing_if = "Option::is_none")]
    pub profile: Option<Vec<String>>,
    /// Quality of Service
    #[serde(rename = "qos", skip_serializing_if = "Option::is_none")]
    pub qos: Option<String>,
    /// node reboot requested before start
    #[serde(rename = "reboot", skip_serializing_if = "Option::is_none")]
    pub reboot: Option<bool>,
    /// comma separated list of required nodes
    #[serde(rename = "required_nodes", skip_serializing_if = "Option::is_none")]
    pub required_nodes: Option<String>,
    /// enable or disable job requeue option
    #[serde(rename = "requeue", skip_serializing_if = "Option::is_none")]
    pub requeue: Option<bool>,
    /// time of latest size change
    #[serde(rename = "resize_time", skip_serializing_if = "Option::is_none")]
    pub resize_time: Option<i64>,
    /// count of job restarts
    #[serde(rename = "restart_cnt", skip_serializing_if = "Option::is_none")]
    pub restart_cnt: Option<String>,
    /// reservation name
    #[serde(rename = "resv_name", skip_serializing_if = "Option::is_none")]
    pub resv_name: Option<String>,
    /// type and if job can share nodes with other jobs
    #[serde(rename = "shared", skip_serializing_if = "Option::is_none")]
    pub shared: Option<String>,
    /// details requested
    #[serde(rename = "show_flags", skip_serializing_if = "Option::is_none")]
    pub show_flags: Option<Vec<String>>,
    /// sockets per board required by job
    #[serde(rename = "sockets_per_board", skip_serializing_if = "Option::is_none")]
    pub sockets_per_board: Option<String>,
    /// sockets per node required by job
    #[serde(rename = "sockets_per_node", skip_serializing_if = "Option::is_none")]
    pub sockets_per_node: Option<String>,
    /// time execution begins, actual or expected
    #[serde(rename = "start_time", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<i64>,
    /// optional details for state_reason
    #[serde(rename = "state_description", skip_serializing_if = "Option::is_none")]
    pub state_description: Option<String>,
    /// reason job still pending or failed
    #[serde(rename = "state_reason", skip_serializing_if = "Option::is_none")]
    pub state_reason: Option<String>,
    /// pathname of job's stderr file
    #[serde(rename = "standard_error", skip_serializing_if = "Option::is_none")]
    pub standard_error: Option<String>,
    /// pathname of job's stdin file
    #[serde(rename = "standard_input", skip_serializing_if = "Option::is_none")]
    pub standard_input: Option<String>,
    /// pathname of job's stdout file
    #[serde(rename = "standard_output", skip_serializing_if = "Option::is_none")]
    pub standard_output: Option<String>,
    /// time of job submission
    #[serde(rename = "submit_time", skip_serializing_if = "Option::is_none")]
    pub submit_time: Option<i64>,
    /// time job last suspended or resumed
    #[serde(rename = "suspend_time", skip_serializing_if = "Option::is_none")]
    pub suspend_time: Option<i64>,
    /// slurmctld's arbitrary comment
    #[serde(rename = "system_comment", skip_serializing_if = "Option::is_none")]
    pub system_comment: Option<String>,
    /// maximum run time in minutes
    #[serde(rename = "time_limit", skip_serializing_if = "Option::is_none")]
    pub time_limit: Option<String>,
    /// minimum run time in minutes
    #[serde(rename = "time_minimum", skip_serializing_if = "Option::is_none")]
    pub time_minimum: Option<String>,
    /// threads per core required by job
    #[serde(rename = "threads_per_core", skip_serializing_if = "Option::is_none")]
    pub threads_per_core: Option<String>,
    /// Task to TRES binding directives
    #[serde(rename = "tres_bind", skip_serializing_if = "Option::is_none")]
    pub tres_bind: Option<String>,
    /// TRES frequency directives
    #[serde(rename = "tres_freq", skip_serializing_if = "Option::is_none")]
    pub tres_freq: Option<String>,
    /// semicolon delimited list of TRES=# values
    #[serde(rename = "tres_per_job", skip_serializing_if = "Option::is_none")]
    pub tres_per_job: Option<String>,
    /// semicolon delimited list of TRES=# values
    #[serde(rename = "tres_per_node", skip_serializing_if = "Option::is_none")]
    pub tres_per_node: Option<String>,
    /// semicolon delimited list of TRES=# values
    #[serde(rename = "tres_per_socket", skip_serializing_if = "Option::is_none")]
    pub tres_per_socket: Option<String>,
    /// semicolon delimited list of TRES=# values
    #[serde(rename = "tres_per_task", skip_serializing_if = "Option::is_none")]
    pub tres_per_task: Option<String>,
    /// tres reqeusted in the job
    #[serde(rename = "tres_req_str", skip_serializing_if = "Option::is_none")]
    pub tres_req_str: Option<String>,
    /// tres used in the job
    #[serde(rename = "tres_alloc_str", skip_serializing_if = "Option::is_none")]
    pub tres_alloc_str: Option<String>,
    /// user id the job runs as
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    /// user the job runs as
    #[serde(rename = "user_name", skip_serializing_if = "Option::is_none")]
    pub user_name: Option<String>,
    /// wckey for job
    #[serde(rename = "wckey", skip_serializing_if = "Option::is_none")]
    pub wckey: Option<String>,
    /// pathname of working directory
    #[serde(rename = "current_working_directory", skip_serializing_if = "Option::is_none")]
    pub current_working_directory: Option<String>,
}

impl V0Period0Period37JobResponseProperties {
    pub fn new() -> V0Period0Period37JobResponseProperties {
        V0Period0Period37JobResponseProperties {
            account: None,
            accrue_time: None,
            admin_comment: None,
            array_job_id: None,
            array_task_id: None,
            array_max_tasks: None,
            array_task_string: None,
            association_id: None,
            batch_features: None,
            batch_flag: None,
            batch_host: None,
            flags: None,
            burst_buffer: None,
            burst_buffer_state: None,
            cluster: None,
            cluster_features: None,
            command: None,
            comment: None,
            contiguous: None,
            core_spec: None,
            thread_spec: None,
            cores_per_socket: None,
            billable_tres: None,
            cpus_per_task: None,
            cpu_frequency_minimum: None,
            cpu_frequency_maximum: None,
            cpu_frequency_governor: None,
            cpus_per_tres: None,
            deadline: None,
            delay_boot: None,
            dependency: None,
            derived_exit_code: None,
            eligible_time: None,
            end_time: None,
            excluded_nodes: None,
            exit_code: None,
            features: None,
            federation_origin: None,
            federation_siblings_active: None,
            federation_siblings_viable: None,
            gres_detail: None,
            group_id: None,
            job_id: None,
            job_resources: None,
            job_state: None,
            last_sched_evaluation: None,
            licenses: None,
            max_cpus: None,
            max_nodes: None,
            mcs_label: None,
            memory_per_tres: None,
            name: None,
            nodes: None,
            nice: None,
            tasks_per_core: None,
            tasks_per_socket: None,
            tasks_per_board: None,
            cpus: None,
            node_count: None,
            tasks: None,
            het_job_id: None,
            het_job_id_set: None,
            het_job_offset: None,
            partition: None,
            memory_per_node: None,
            memory_per_cpu: None,
            minimum_cpus_per_node: None,
            minimum_tmp_disk_per_node: None,
            preempt_time: None,
            pre_sus_time: None,
            priority: None,
            profile: None,
            qos: None,
            reboot: None,
            required_nodes: None,
            requeue: None,
            resize_time: None,
            restart_cnt: None,
            resv_name: None,
            shared: None,
            show_flags: None,
            sockets_per_board: None,
            sockets_per_node: None,
            start_time: None,
            state_description: None,
            state_reason: None,
            standard_error: None,
            standard_input: None,
            standard_output: None,
            submit_time: None,
            suspend_time: None,
            system_comment: None,
            time_limit: None,
            time_minimum: None,
            threads_per_core: None,
            tres_bind: None,
            tres_freq: None,
            tres_per_job: None,
            tres_per_node: None,
            tres_per_socket: None,
            tres_per_task: None,
            tres_req_str: None,
            tres_alloc_str: None,
            user_id: None,
            user_name: None,
            wckey: None,
            current_working_directory: None,
        }
    }
}


