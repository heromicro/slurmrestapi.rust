/*
 * Slurm Rest API
 *
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.39
 * Contact: sales@schedmd.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct V0Period0Period39JobDescMsg {
    #[serde(rename = "account", skip_serializing_if = "Option::is_none")]
    pub account: Option<String>,
    #[serde(rename = "account_gather_frequency", skip_serializing_if = "Option::is_none")]
    pub account_gather_frequency: Option<String>,
    #[serde(rename = "admin_comment", skip_serializing_if = "Option::is_none")]
    pub admin_comment: Option<String>,
    #[serde(rename = "allocation_node_list", skip_serializing_if = "Option::is_none")]
    pub allocation_node_list: Option<String>,
    #[serde(rename = "allocation_node_port", skip_serializing_if = "Option::is_none")]
    pub allocation_node_port: Option<i32>,
    #[serde(rename = "argv", skip_serializing_if = "Option::is_none")]
    pub argv: Option<Vec<String>>,
    #[serde(rename = "array", skip_serializing_if = "Option::is_none")]
    pub array: Option<String>,
    #[serde(rename = "batch_features", skip_serializing_if = "Option::is_none")]
    pub batch_features: Option<String>,
    #[serde(rename = "begin_time", skip_serializing_if = "Option::is_none")]
    pub begin_time: Option<i64>,
    #[serde(rename = "flags", skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<Flags>>,
    #[serde(rename = "burst_buffer", skip_serializing_if = "Option::is_none")]
    pub burst_buffer: Option<String>,
    #[serde(rename = "clusters", skip_serializing_if = "Option::is_none")]
    pub clusters: Option<String>,
    #[serde(rename = "cluster_constraint", skip_serializing_if = "Option::is_none")]
    pub cluster_constraint: Option<String>,
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(rename = "contiguous", skip_serializing_if = "Option::is_none")]
    pub contiguous: Option<bool>,
    #[serde(rename = "container", skip_serializing_if = "Option::is_none")]
    pub container: Option<String>,
    #[serde(rename = "container_id", skip_serializing_if = "Option::is_none")]
    pub container_id: Option<String>,
    #[serde(rename = "core_specification", skip_serializing_if = "Option::is_none")]
    pub core_specification: Option<i32>,
    #[serde(rename = "thread_specification", skip_serializing_if = "Option::is_none")]
    pub thread_specification: Option<i32>,
    #[serde(rename = "cpu_binding", skip_serializing_if = "Option::is_none")]
    pub cpu_binding: Option<String>,
    #[serde(rename = "cpu_binding_flags", skip_serializing_if = "Option::is_none")]
    pub cpu_binding_flags: Option<Vec<CpuBindingFlags>>,
    #[serde(rename = "cpu_frequency", skip_serializing_if = "Option::is_none")]
    pub cpu_frequency: Option<String>,
    #[serde(rename = "cpus_per_tres", skip_serializing_if = "Option::is_none")]
    pub cpus_per_tres: Option<String>,
    #[serde(rename = "crontab", skip_serializing_if = "Option::is_none")]
    pub crontab: Option<Box<crate::models::V0Period0Period39CronEntry>>,
    #[serde(rename = "deadline", skip_serializing_if = "Option::is_none")]
    pub deadline: Option<i64>,
    #[serde(rename = "delay_boot", skip_serializing_if = "Option::is_none")]
    pub delay_boot: Option<i32>,
    #[serde(rename = "dependency", skip_serializing_if = "Option::is_none")]
    pub dependency: Option<String>,
    #[serde(rename = "end_time", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<i64>,
    #[serde(rename = "environment", skip_serializing_if = "Option::is_none")]
    pub environment: Option<Vec<String>>,
    #[serde(rename = "excluded_nodes", skip_serializing_if = "Option::is_none")]
    pub excluded_nodes: Option<Vec<String>>,
    #[serde(rename = "extra", skip_serializing_if = "Option::is_none")]
    pub extra: Option<String>,
    #[serde(rename = "constraints", skip_serializing_if = "Option::is_none")]
    pub constraints: Option<String>,
    #[serde(rename = "group_id", skip_serializing_if = "Option::is_none")]
    pub group_id: Option<String>,
    #[serde(rename = "hetjob_group", skip_serializing_if = "Option::is_none")]
    pub hetjob_group: Option<i32>,
    #[serde(rename = "immediate", skip_serializing_if = "Option::is_none")]
    pub immediate: Option<bool>,
    #[serde(rename = "job_id", skip_serializing_if = "Option::is_none")]
    pub job_id: Option<i32>,
    #[serde(rename = "kill_on_node_fail", skip_serializing_if = "Option::is_none")]
    pub kill_on_node_fail: Option<bool>,
    #[serde(rename = "licenses", skip_serializing_if = "Option::is_none")]
    pub licenses: Option<String>,
    #[serde(rename = "mail_type", skip_serializing_if = "Option::is_none")]
    pub mail_type: Option<Vec<MailType>>,
    #[serde(rename = "mail_user", skip_serializing_if = "Option::is_none")]
    pub mail_user: Option<String>,
    #[serde(rename = "mcs_label", skip_serializing_if = "Option::is_none")]
    pub mcs_label: Option<String>,
    #[serde(rename = "memory_binding", skip_serializing_if = "Option::is_none")]
    pub memory_binding: Option<String>,
    #[serde(rename = "memory_binding_type", skip_serializing_if = "Option::is_none")]
    pub memory_binding_type: Option<Vec<MemoryBindingType>>,
    #[serde(rename = "memory_per_tres", skip_serializing_if = "Option::is_none")]
    pub memory_per_tres: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "network", skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    #[serde(rename = "nice", skip_serializing_if = "Option::is_none")]
    pub nice: Option<i32>,
    #[serde(rename = "tasks", skip_serializing_if = "Option::is_none")]
    pub tasks: Option<i32>,
    #[serde(rename = "open_mode", skip_serializing_if = "Option::is_none")]
    pub open_mode: Option<Vec<OpenMode>>,
    #[serde(rename = "reserve_ports", skip_serializing_if = "Option::is_none")]
    pub reserve_ports: Option<i32>,
    #[serde(rename = "overcommit", skip_serializing_if = "Option::is_none")]
    pub overcommit: Option<bool>,
    #[serde(rename = "partition", skip_serializing_if = "Option::is_none")]
    pub partition: Option<String>,
    #[serde(rename = "distribution_plane_size", skip_serializing_if = "Option::is_none")]
    pub distribution_plane_size: Option<i32>,
    #[serde(rename = "power_flags", skip_serializing_if = "Option::is_none")]
    pub power_flags: Option<Vec<PowerFlags>>,
    #[serde(rename = "prefer", skip_serializing_if = "Option::is_none")]
    pub prefer: Option<String>,
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<i32>,
    #[serde(rename = "profile", skip_serializing_if = "Option::is_none")]
    pub profile: Option<Vec<Profile>>,
    #[serde(rename = "qos", skip_serializing_if = "Option::is_none")]
    pub qos: Option<String>,
    #[serde(rename = "reboot", skip_serializing_if = "Option::is_none")]
    pub reboot: Option<bool>,
    #[serde(rename = "required_nodes", skip_serializing_if = "Option::is_none")]
    pub required_nodes: Option<Vec<String>>,
    #[serde(rename = "requeue", skip_serializing_if = "Option::is_none")]
    pub requeue: Option<bool>,
    #[serde(rename = "reservation", skip_serializing_if = "Option::is_none")]
    pub reservation: Option<String>,
    #[serde(rename = "script", skip_serializing_if = "Option::is_none")]
    pub script: Option<String>,
    #[serde(rename = "shared", skip_serializing_if = "Option::is_none")]
    pub shared: Option<Vec<Shared>>,
    #[serde(rename = "exclusive", skip_serializing_if = "Option::is_none")]
    pub exclusive: Option<Vec<Exclusive>>,
    #[serde(rename = "site_factor", skip_serializing_if = "Option::is_none")]
    pub site_factor: Option<i32>,
    #[serde(rename = "spank_environment", skip_serializing_if = "Option::is_none")]
    pub spank_environment: Option<Vec<String>>,
    #[serde(rename = "distribution", skip_serializing_if = "Option::is_none")]
    pub distribution: Option<String>,
    #[serde(rename = "time_limit", skip_serializing_if = "Option::is_none")]
    pub time_limit: Option<Box<crate::models::V0Period0Period39Uint32NoVal>>,
    #[serde(rename = "time_minimum", skip_serializing_if = "Option::is_none")]
    pub time_minimum: Option<Box<crate::models::V0Period0Period39Uint32NoVal>>,
    #[serde(rename = "tres_bind", skip_serializing_if = "Option::is_none")]
    pub tres_bind: Option<String>,
    #[serde(rename = "tres_freq", skip_serializing_if = "Option::is_none")]
    pub tres_freq: Option<String>,
    #[serde(rename = "tres_per_job", skip_serializing_if = "Option::is_none")]
    pub tres_per_job: Option<String>,
    #[serde(rename = "tres_per_node", skip_serializing_if = "Option::is_none")]
    pub tres_per_node: Option<String>,
    #[serde(rename = "tres_per_socket", skip_serializing_if = "Option::is_none")]
    pub tres_per_socket: Option<String>,
    #[serde(rename = "tres_per_task", skip_serializing_if = "Option::is_none")]
    pub tres_per_task: Option<String>,
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    #[serde(rename = "wait_all_nodes", skip_serializing_if = "Option::is_none")]
    pub wait_all_nodes: Option<bool>,
    #[serde(rename = "kill_warning_flags", skip_serializing_if = "Option::is_none")]
    pub kill_warning_flags: Option<Vec<KillWarningFlags>>,
    #[serde(rename = "kill_warning_signal", skip_serializing_if = "Option::is_none")]
    pub kill_warning_signal: Option<String>,
    #[serde(rename = "kill_warning_delay", skip_serializing_if = "Option::is_none")]
    pub kill_warning_delay: Option<Box<crate::models::V0Period0Period39Uint16NoVal>>,
    #[serde(rename = "current_working_directory", skip_serializing_if = "Option::is_none")]
    pub current_working_directory: Option<String>,
    #[serde(rename = "cpus_per_task", skip_serializing_if = "Option::is_none")]
    pub cpus_per_task: Option<i32>,
    #[serde(rename = "minimum_cpus", skip_serializing_if = "Option::is_none")]
    pub minimum_cpus: Option<i32>,
    #[serde(rename = "maximum_cpus", skip_serializing_if = "Option::is_none")]
    pub maximum_cpus: Option<i32>,
    #[serde(rename = "nodes", skip_serializing_if = "Option::is_none")]
    pub nodes: Option<String>,
    #[serde(rename = "minimum_nodes", skip_serializing_if = "Option::is_none")]
    pub minimum_nodes: Option<i32>,
    #[serde(rename = "maximum_nodes", skip_serializing_if = "Option::is_none")]
    pub maximum_nodes: Option<i32>,
    #[serde(rename = "minimum_boards_per_node", skip_serializing_if = "Option::is_none")]
    pub minimum_boards_per_node: Option<i32>,
    #[serde(rename = "minimum_sockets_per_board", skip_serializing_if = "Option::is_none")]
    pub minimum_sockets_per_board: Option<i32>,
    #[serde(rename = "sockets_per_node", skip_serializing_if = "Option::is_none")]
    pub sockets_per_node: Option<i32>,
    #[serde(rename = "threads_per_core", skip_serializing_if = "Option::is_none")]
    pub threads_per_core: Option<i32>,
    #[serde(rename = "tasks_per_node", skip_serializing_if = "Option::is_none")]
    pub tasks_per_node: Option<i32>,
    #[serde(rename = "tasks_per_socket", skip_serializing_if = "Option::is_none")]
    pub tasks_per_socket: Option<i32>,
    #[serde(rename = "tasks_per_core", skip_serializing_if = "Option::is_none")]
    pub tasks_per_core: Option<i32>,
    #[serde(rename = "tasks_per_board", skip_serializing_if = "Option::is_none")]
    pub tasks_per_board: Option<i32>,
    #[serde(rename = "ntasks_per_tres", skip_serializing_if = "Option::is_none")]
    pub ntasks_per_tres: Option<i32>,
    #[serde(rename = "minimum_cpus_per_node", skip_serializing_if = "Option::is_none")]
    pub minimum_cpus_per_node: Option<i32>,
    #[serde(rename = "memory_per_cpu", skip_serializing_if = "Option::is_none")]
    pub memory_per_cpu: Option<Box<crate::models::V0Period0Period39Uint64NoVal>>,
    #[serde(rename = "memory_per_node", skip_serializing_if = "Option::is_none")]
    pub memory_per_node: Option<Box<crate::models::V0Period0Period39Uint64NoVal>>,
    #[serde(rename = "temporary_disk_per_node", skip_serializing_if = "Option::is_none")]
    pub temporary_disk_per_node: Option<i32>,
    #[serde(rename = "selinux_context", skip_serializing_if = "Option::is_none")]
    pub selinux_context: Option<String>,
    #[serde(rename = "required_switches", skip_serializing_if = "Option::is_none")]
    pub required_switches: Option<Box<crate::models::V0Period0Period39Uint32NoVal>>,
    #[serde(rename = "standard_error", skip_serializing_if = "Option::is_none")]
    pub standard_error: Option<String>,
    #[serde(rename = "standard_input", skip_serializing_if = "Option::is_none")]
    pub standard_input: Option<String>,
    #[serde(rename = "standard_output", skip_serializing_if = "Option::is_none")]
    pub standard_output: Option<String>,
    #[serde(rename = "wait_for_switch", skip_serializing_if = "Option::is_none")]
    pub wait_for_switch: Option<i32>,
    #[serde(rename = "wckey", skip_serializing_if = "Option::is_none")]
    pub wckey: Option<String>,
    #[serde(rename = "x11", skip_serializing_if = "Option::is_none")]
    pub x11: Option<Vec<X11>>,
    #[serde(rename = "x11_magic_cookie", skip_serializing_if = "Option::is_none")]
    pub x11_magic_cookie: Option<String>,
    #[serde(rename = "x11_target_host", skip_serializing_if = "Option::is_none")]
    pub x11_target_host: Option<String>,
    #[serde(rename = "x11_target_port", skip_serializing_if = "Option::is_none")]
    pub x11_target_port: Option<i32>,
}

impl V0Period0Period39JobDescMsg {
    pub fn new() -> V0Period0Period39JobDescMsg {
        V0Period0Period39JobDescMsg {
            account: None,
            account_gather_frequency: None,
            admin_comment: None,
            allocation_node_list: None,
            allocation_node_port: None,
            argv: None,
            array: None,
            batch_features: None,
            begin_time: None,
            flags: None,
            burst_buffer: None,
            clusters: None,
            cluster_constraint: None,
            comment: None,
            contiguous: None,
            container: None,
            container_id: None,
            core_specification: None,
            thread_specification: None,
            cpu_binding: None,
            cpu_binding_flags: None,
            cpu_frequency: None,
            cpus_per_tres: None,
            crontab: None,
            deadline: None,
            delay_boot: None,
            dependency: None,
            end_time: None,
            environment: None,
            excluded_nodes: None,
            extra: None,
            constraints: None,
            group_id: None,
            hetjob_group: None,
            immediate: None,
            job_id: None,
            kill_on_node_fail: None,
            licenses: None,
            mail_type: None,
            mail_user: None,
            mcs_label: None,
            memory_binding: None,
            memory_binding_type: None,
            memory_per_tres: None,
            name: None,
            network: None,
            nice: None,
            tasks: None,
            open_mode: None,
            reserve_ports: None,
            overcommit: None,
            partition: None,
            distribution_plane_size: None,
            power_flags: None,
            prefer: None,
            priority: None,
            profile: None,
            qos: None,
            reboot: None,
            required_nodes: None,
            requeue: None,
            reservation: None,
            script: None,
            shared: None,
            exclusive: None,
            site_factor: None,
            spank_environment: None,
            distribution: None,
            time_limit: None,
            time_minimum: None,
            tres_bind: None,
            tres_freq: None,
            tres_per_job: None,
            tres_per_node: None,
            tres_per_socket: None,
            tres_per_task: None,
            user_id: None,
            wait_all_nodes: None,
            kill_warning_flags: None,
            kill_warning_signal: None,
            kill_warning_delay: None,
            current_working_directory: None,
            cpus_per_task: None,
            minimum_cpus: None,
            maximum_cpus: None,
            nodes: None,
            minimum_nodes: None,
            maximum_nodes: None,
            minimum_boards_per_node: None,
            minimum_sockets_per_board: None,
            sockets_per_node: None,
            threads_per_core: None,
            tasks_per_node: None,
            tasks_per_socket: None,
            tasks_per_core: None,
            tasks_per_board: None,
            ntasks_per_tres: None,
            minimum_cpus_per_node: None,
            memory_per_cpu: None,
            memory_per_node: None,
            temporary_disk_per_node: None,
            selinux_context: None,
            required_switches: None,
            standard_error: None,
            standard_input: None,
            standard_output: None,
            wait_for_switch: None,
            wckey: None,
            x11: None,
            x11_magic_cookie: None,
            x11_target_host: None,
            x11_target_port: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Flags {
    #[serde(rename = "KILL_INVALID_DEPENDENCY")]
    KillInvalidDependency,
    #[serde(rename = "NO_KILL_INVALID_DEPENDENCY")]
    NoKillInvalidDependency,
    #[serde(rename = "HAS_STATE_DIRECTORY")]
    HasStateDirectory,
    #[serde(rename = "TESTING_BACKFILL")]
    TestingBackfill,
    #[serde(rename = "GRES_BINDING_ENFORCED")]
    GresBindingEnforced,
    #[serde(rename = "TEST_NOW_ONLY")]
    TestNowOnly,
    #[serde(rename = "SEND_JOB_ENVIRONMENT")]
    SendJobEnvironment,
    #[serde(rename = "SPREAD_JOB")]
    SpreadJob,
    #[serde(rename = "PREFER_MINIMUM_NODE_COUNT")]
    PreferMinimumNodeCount,
    #[serde(rename = "JOB_KILL_HURRY")]
    JobKillHurry,
    #[serde(rename = "SKIP_TRES_STRING_ACCOUNTING")]
    SkipTresStringAccounting,
    #[serde(rename = "SIBLING_CLUSTER_UPDATE_ONLY")]
    SiblingClusterUpdateOnly,
    #[serde(rename = "HETEROGENEOUS_JOB")]
    HeterogeneousJob,
    #[serde(rename = "EXACT_TASK_COUNT_REQUESTED")]
    ExactTaskCountRequested,
    #[serde(rename = "EXACT_CPU_COUNT_REQUESTED")]
    ExactCpuCountRequested,
    #[serde(rename = "TESTING_WHOLE_NODE_BACKFILL")]
    TestingWholeNodeBackfill,
    #[serde(rename = "TOP_PRIORITY_JOB")]
    TopPriorityJob,
    #[serde(rename = "ACCRUE_COUNT_CLEARED")]
    AccrueCountCleared,
    #[serde(rename = "GRED_BINDING_DISABLED")]
    GredBindingDisabled,
    #[serde(rename = "JOB_WAS_RUNNING")]
    JobWasRunning,
    #[serde(rename = "JOB_ACCRUE_TIME_RESET")]
    JobAccrueTimeReset,
    #[serde(rename = "CRON_JOB")]
    CronJob,
    #[serde(rename = "EXACT_MEMORY_REQUESTED")]
    ExactMemoryRequested,
    #[serde(rename = "JOB_RESIZED")]
    JobResized,
    #[serde(rename = "USING_DEFAULT_ACCOUNT")]
    UsingDefaultAccount,
    #[serde(rename = "USING_DEFAULT_PARTITION")]
    UsingDefaultPartition,
    #[serde(rename = "USING_DEFAULT_QOS")]
    UsingDefaultQos,
    #[serde(rename = "USING_DEFAULT_WCKEY")]
    UsingDefaultWckey,
    #[serde(rename = "DEPENDENT")]
    Dependent,
    #[serde(rename = "MAGNETIC")]
    Magnetic,
    #[serde(rename = "PARTITION_ASSIGNED")]
    PartitionAssigned,
    #[serde(rename = "BACKFILL_ATTEMPTED")]
    BackfillAttempted,
    #[serde(rename = "SCHEDULING_ATTEMPTED")]
    SchedulingAttempted,
    #[serde(rename = "SAVE_BATCH_SCRIPT")]
    SaveBatchScript,
}

impl Default for Flags {
    fn default() -> Flags {
        Self::KillInvalidDependency
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CpuBindingFlags {
    #[serde(rename = "VERBOSE")]
    Verbose,
    #[serde(rename = "CPU_BIND_TO_THREADS")]
    CpuBindToThreads,
    #[serde(rename = "CPU_BIND_TO_CORES")]
    CpuBindToCores,
    #[serde(rename = "CPU_BIND_TO_SOCKETS")]
    CpuBindToSockets,
    #[serde(rename = "CPU_BIND_TO_LDOMS")]
    CpuBindToLdoms,
    #[serde(rename = "CPU_BIND_NONE")]
    CpuBindNone,
    #[serde(rename = "CPU_BIND_RANK")]
    CpuBindRank,
    #[serde(rename = "CPU_BIND_MAP")]
    CpuBindMap,
    #[serde(rename = "CPU_BIND_MASK")]
    CpuBindMask,
    #[serde(rename = "CPU_BIND_LDRANK")]
    CpuBindLdrank,
    #[serde(rename = "CPU_BIND_LDMAP")]
    CpuBindLdmap,
    #[serde(rename = "CPU_BIND_LDMASK")]
    CpuBindLdmask,
    #[serde(rename = "CPU_BIND_ONE_THREAD_PER_CORE")]
    CpuBindOneThreadPerCore,
    #[serde(rename = "CPU_AUTO_BIND_TO_THREADS")]
    CpuAutoBindToThreads,
    #[serde(rename = "CPU_AUTO_BIND_TO_CORES")]
    CpuAutoBindToCores,
    #[serde(rename = "CPU_AUTO_BIND_TO_SOCKETS")]
    CpuAutoBindToSockets,
    #[serde(rename = "SLURMD_OFF_SPEC")]
    SlurmdOffSpec,
    #[serde(rename = "CPU_BIND_OFF")]
    CpuBindOff,
}

impl Default for CpuBindingFlags {
    fn default() -> CpuBindingFlags {
        Self::Verbose
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MailType {
    #[serde(rename = "BEGIN")]
    Begin,
    #[serde(rename = "END")]
    End,
    #[serde(rename = "FAIL")]
    Fail,
    #[serde(rename = "REQUEUE")]
    Requeue,
    #[serde(rename = "TIME=100%")]
    TimeEqual100Percent,
    #[serde(rename = "TIME=90%")]
    TimeEqual90Percent,
    #[serde(rename = "TIME=80%")]
    TimeEqual80Percent,
    #[serde(rename = "TIME=50%")]
    TimeEqual50Percent,
    #[serde(rename = "STAGE_OUT")]
    StageOut,
    #[serde(rename = "ARRAY_TASKS")]
    ArrayTasks,
    #[serde(rename = "INVALID_DEPENDENCY")]
    InvalidDependency,
}

impl Default for MailType {
    fn default() -> MailType {
        Self::Begin
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MemoryBindingType {
    #[serde(rename = "VERBOSE")]
    Verbose,
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "RANK")]
    Rank,
    #[serde(rename = "MAP")]
    Map,
    #[serde(rename = "MASK")]
    Mask,
    #[serde(rename = "LOCAL")]
    Local,
    #[serde(rename = "SORT")]
    Sort,
    #[serde(rename = "PREFER")]
    Prefer,
}

impl Default for MemoryBindingType {
    fn default() -> MemoryBindingType {
        Self::Verbose
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OpenMode {
    #[serde(rename = "APPEND")]
    Append,
    #[serde(rename = "TRUNCATE")]
    Truncate,
}

impl Default for OpenMode {
    fn default() -> OpenMode {
        Self::Append
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PowerFlags {
    #[serde(rename = "EQUAL_POWER")]
    EqualPower,
}

impl Default for PowerFlags {
    fn default() -> PowerFlags {
        Self::EqualPower
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Profile {
    #[serde(rename = "NOT_SET")]
    NotSet,
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "ENERGY")]
    Energy,
    #[serde(rename = "LUSTRE")]
    Lustre,
    #[serde(rename = "NETWORK")]
    Network,
    #[serde(rename = "TASK")]
    Task,
}

impl Default for Profile {
    fn default() -> Profile {
        Self::NotSet
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Shared {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "oversubscribe")]
    Oversubscribe,
    #[serde(rename = "user")]
    User,
    #[serde(rename = "mcs")]
    Mcs,
}

impl Default for Shared {
    fn default() -> Shared {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Exclusive {
    #[serde(rename = "true")]
    True,
    #[serde(rename = "false")]
    False,
    #[serde(rename = "user")]
    User,
    #[serde(rename = "mcs")]
    Mcs,
}

impl Default for Exclusive {
    fn default() -> Exclusive {
        Self::True
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum KillWarningFlags {
    #[serde(rename = "BATCH_JOB")]
    BatchJob,
    #[serde(rename = "ARRAY_JOB")]
    ArrayJob,
    #[serde(rename = "FULL_STEPS_ONLY")]
    FullStepsOnly,
    #[serde(rename = "FULL_JOB")]
    FullJob,
    #[serde(rename = "FEDERATION_REQUEUE")]
    FederationRequeue,
    #[serde(rename = "HURRY")]
    Hurry,
    #[serde(rename = "OUT_OF_MEMORY")]
    OutOfMemory,
    #[serde(rename = "NO_SIBLING_JOBS")]
    NoSiblingJobs,
    #[serde(rename = "RESERVATION_JOB")]
    ReservationJob,
    #[serde(rename = "WARNING_SENT")]
    WarningSent,
}

impl Default for KillWarningFlags {
    fn default() -> KillWarningFlags {
        Self::BatchJob
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum X11 {
    #[serde(rename = "FORWARD_ALL_NODES")]
    ForwardAllNodes,
    #[serde(rename = "BATCH_NODE")]
    BatchNode,
    #[serde(rename = "FIRST_NODE")]
    FirstNode,
    #[serde(rename = "LAST_NODE")]
    LastNode,
}

impl Default for X11 {
    fn default() -> X11 {
        Self::ForwardAllNodes
    }
}

