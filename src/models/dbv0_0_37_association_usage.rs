/*
 * Slurm Rest API
 *
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.37
 * Contact: sales@schedmd.com
 * Generated by: https://openapi-generator.tech
 */

/// Dbv0037AssociationUsage : Association usage



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Dbv0037AssociationUsage {
    /// Jobs accuring priority
    #[serde(rename = "accrue_job_count", skip_serializing_if = "Option::is_none")]
    pub accrue_job_count: Option<i32>,
    /// Group used wallclock time (s)
    #[serde(rename = "group_used_wallclock", skip_serializing_if = "Option::is_none")]
    pub group_used_wallclock: Option<f32>,
    /// Fairshare factor
    #[serde(rename = "fairshare_factor", skip_serializing_if = "Option::is_none")]
    pub fairshare_factor: Option<f32>,
    /// Fairshare shares
    #[serde(rename = "fairshare_shares", skip_serializing_if = "Option::is_none")]
    pub fairshare_shares: Option<i32>,
    /// Currently active jobs
    #[serde(rename = "normalized_priority", skip_serializing_if = "Option::is_none")]
    pub normalized_priority: Option<i32>,
    /// Normalized shares
    #[serde(rename = "normalized_shares", skip_serializing_if = "Option::is_none")]
    pub normalized_shares: Option<f32>,
    /// Effective normalized usage
    #[serde(rename = "effective_normalized_usage", skip_serializing_if = "Option::is_none")]
    pub effective_normalized_usage: Option<f32>,
    /// Raw usage
    #[serde(rename = "raw_usage", skip_serializing_if = "Option::is_none")]
    pub raw_usage: Option<i32>,
    /// Total jobs submitted
    #[serde(rename = "job_count", skip_serializing_if = "Option::is_none")]
    pub job_count: Option<i32>,
    /// Fairshare level
    #[serde(rename = "fairshare_level", skip_serializing_if = "Option::is_none")]
    pub fairshare_level: Option<f32>,
}

impl Dbv0037AssociationUsage {
    /// Association usage
    pub fn new() -> Dbv0037AssociationUsage {
        Dbv0037AssociationUsage {
            accrue_job_count: None,
            group_used_wallclock: None,
            fairshare_factor: None,
            fairshare_shares: None,
            normalized_priority: None,
            normalized_shares: None,
            effective_normalized_usage: None,
            raw_usage: None,
            job_count: None,
            fairshare_level: None,
        }
    }
}


