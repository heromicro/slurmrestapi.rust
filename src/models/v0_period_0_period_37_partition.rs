/*
 * Slurm Rest API
 *
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.37
 * Contact: sales@schedmd.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct V0Period0Period37Partition {
    /// partition options
    #[serde(rename = "flags", skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    /// preemption type
    #[serde(rename = "preemption_mode", skip_serializing_if = "Option::is_none")]
    pub preemption_mode: Option<Vec<String>>,
    /// list names of allowed allocating nodes
    #[serde(rename = "allowed_allocation_nodes", skip_serializing_if = "Option::is_none")]
    pub allowed_allocation_nodes: Option<String>,
    /// comma delimited list of accounts
    #[serde(rename = "allowed_accounts", skip_serializing_if = "Option::is_none")]
    pub allowed_accounts: Option<String>,
    /// comma delimited list of groups
    #[serde(rename = "allowed_groups", skip_serializing_if = "Option::is_none")]
    pub allowed_groups: Option<String>,
    /// comma delimited list of qos
    #[serde(rename = "allowed_qos", skip_serializing_if = "Option::is_none")]
    pub allowed_qos: Option<String>,
    /// name of alternate partition
    #[serde(rename = "alternative", skip_serializing_if = "Option::is_none")]
    pub alternative: Option<String>,
    /// TRES billing weights
    #[serde(rename = "billing_weights", skip_serializing_if = "Option::is_none")]
    pub billing_weights: Option<String>,
    /// default MB memory per allocated CPU
    #[serde(rename = "default_memory_per_cpu", skip_serializing_if = "Option::is_none")]
    pub default_memory_per_cpu: Option<i64>,
    /// default time limit (minutes)
    #[serde(rename = "default_time_limit", skip_serializing_if = "Option::is_none")]
    pub default_time_limit: Option<i64>,
    /// comma delimited list of denied accounts
    #[serde(rename = "denied_accounts", skip_serializing_if = "Option::is_none")]
    pub denied_accounts: Option<String>,
    /// comma delimited list of denied qos
    #[serde(rename = "denied_qos", skip_serializing_if = "Option::is_none")]
    pub denied_qos: Option<String>,
    /// preemption grace time (seconds)
    #[serde(rename = "preemption_grace_time", skip_serializing_if = "Option::is_none")]
    pub preemption_grace_time: Option<i64>,
    /// maximum allocated CPUs per node
    #[serde(rename = "maximum_cpus_per_node", skip_serializing_if = "Option::is_none")]
    pub maximum_cpus_per_node: Option<i32>,
    /// maximum memory per allocated CPU (MiB)
    #[serde(rename = "maximum_memory_per_node", skip_serializing_if = "Option::is_none")]
    pub maximum_memory_per_node: Option<i64>,
    /// Max nodes per job
    #[serde(rename = "maximum_nodes_per_job", skip_serializing_if = "Option::is_none")]
    pub maximum_nodes_per_job: Option<i32>,
    /// Max time limit per job
    #[serde(rename = "max_time_limit", skip_serializing_if = "Option::is_none")]
    pub max_time_limit: Option<i64>,
    /// Min number of nodes per job
    #[serde(rename = "min_nodes_per_job", skip_serializing_if = "Option::is_none")]
    pub min_nodes_per_job: Option<i32>,
    /// Partition name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// list names of nodes in partition
    #[serde(rename = "nodes", skip_serializing_if = "Option::is_none")]
    pub nodes: Option<String>,
    /// job's time limit can be exceeded by this number of minutes before cancellation
    #[serde(rename = "over_time_limit", skip_serializing_if = "Option::is_none")]
    pub over_time_limit: Option<i32>,
    /// job priority weight factor
    #[serde(rename = "priority_job_factor", skip_serializing_if = "Option::is_none")]
    pub priority_job_factor: Option<i32>,
    /// tier for scheduling and preemption
    #[serde(rename = "priority_tier", skip_serializing_if = "Option::is_none")]
    pub priority_tier: Option<i32>,
    /// partition QOS name
    #[serde(rename = "qos", skip_serializing_if = "Option::is_none")]
    pub qos: Option<String>,
    /// Partition state
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// Total cpus in partition
    #[serde(rename = "total_cpus", skip_serializing_if = "Option::is_none")]
    pub total_cpus: Option<i32>,
    /// Total number of nodes in partition
    #[serde(rename = "total_nodes", skip_serializing_if = "Option::is_none")]
    pub total_nodes: Option<i32>,
    /// configured TRES in partition
    #[serde(rename = "tres", skip_serializing_if = "Option::is_none")]
    pub tres: Option<String>,
}

impl V0Period0Period37Partition {
    pub fn new() -> V0Period0Period37Partition {
        V0Period0Period37Partition {
            flags: None,
            preemption_mode: None,
            allowed_allocation_nodes: None,
            allowed_accounts: None,
            allowed_groups: None,
            allowed_qos: None,
            alternative: None,
            billing_weights: None,
            default_memory_per_cpu: None,
            default_time_limit: None,
            denied_accounts: None,
            denied_qos: None,
            preemption_grace_time: None,
            maximum_cpus_per_node: None,
            maximum_memory_per_node: None,
            maximum_nodes_per_job: None,
            max_time_limit: None,
            min_nodes_per_job: None,
            name: None,
            nodes: None,
            over_time_limit: None,
            priority_job_factor: None,
            priority_tier: None,
            qos: None,
            state: None,
            total_cpus: None,
            total_nodes: None,
            tres: None,
        }
    }
}


