/*
 * Slurm Rest API
 *
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.39
 * Contact: sales@schedmd.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct V0Period0Period39JobInfo {
    #[serde(rename = "account", skip_serializing_if = "Option::is_none")]
    pub account: Option<String>,
    #[serde(rename = "accrue_time", skip_serializing_if = "Option::is_none")]
    pub accrue_time: Option<i64>,
    #[serde(rename = "admin_comment", skip_serializing_if = "Option::is_none")]
    pub admin_comment: Option<String>,
    #[serde(rename = "allocating_node", skip_serializing_if = "Option::is_none")]
    pub allocating_node: Option<String>,
    #[serde(rename = "array_job_id", skip_serializing_if = "Option::is_none")]
    pub array_job_id: Option<Box<crate::models::V0Period0Period39Uint32NoVal>>,
    #[serde(rename = "array_task_id", skip_serializing_if = "Option::is_none")]
    pub array_task_id: Option<Box<crate::models::V0Period0Period39Uint32NoVal>>,
    #[serde(rename = "array_max_tasks", skip_serializing_if = "Option::is_none")]
    pub array_max_tasks: Option<Box<crate::models::V0Period0Period39Uint32NoVal>>,
    #[serde(rename = "array_task_string", skip_serializing_if = "Option::is_none")]
    pub array_task_string: Option<String>,
    #[serde(rename = "association_id", skip_serializing_if = "Option::is_none")]
    pub association_id: Option<i32>,
    #[serde(rename = "batch_features", skip_serializing_if = "Option::is_none")]
    pub batch_features: Option<String>,
    #[serde(rename = "batch_flag", skip_serializing_if = "Option::is_none")]
    pub batch_flag: Option<bool>,
    #[serde(rename = "batch_host", skip_serializing_if = "Option::is_none")]
    pub batch_host: Option<String>,
    #[serde(rename = "flags", skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<Flags>>,
    #[serde(rename = "burst_buffer", skip_serializing_if = "Option::is_none")]
    pub burst_buffer: Option<String>,
    #[serde(rename = "burst_buffer_state", skip_serializing_if = "Option::is_none")]
    pub burst_buffer_state: Option<String>,
    #[serde(rename = "cluster", skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    #[serde(rename = "cluster_features", skip_serializing_if = "Option::is_none")]
    pub cluster_features: Option<String>,
    #[serde(rename = "command", skip_serializing_if = "Option::is_none")]
    pub command: Option<String>,
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(rename = "container", skip_serializing_if = "Option::is_none")]
    pub container: Option<String>,
    #[serde(rename = "container_id", skip_serializing_if = "Option::is_none")]
    pub container_id: Option<String>,
    #[serde(rename = "contiguous", skip_serializing_if = "Option::is_none")]
    pub contiguous: Option<bool>,
    #[serde(rename = "core_spec", skip_serializing_if = "Option::is_none")]
    pub core_spec: Option<i32>,
    #[serde(rename = "thread_spec", skip_serializing_if = "Option::is_none")]
    pub thread_spec: Option<i32>,
    #[serde(rename = "cores_per_socket", skip_serializing_if = "Option::is_none")]
    pub cores_per_socket: Option<Box<crate::models::V0Period0Period39Uint16NoVal>>,
    #[serde(rename = "billable_tres", skip_serializing_if = "Option::is_none")]
    pub billable_tres: Option<Box<crate::models::V0Period0Period39Float64NoVal>>,
    #[serde(rename = "cpus_per_task", skip_serializing_if = "Option::is_none")]
    pub cpus_per_task: Option<Box<crate::models::V0Period0Period39Uint16NoVal>>,
    #[serde(rename = "cpu_frequency_minimum", skip_serializing_if = "Option::is_none")]
    pub cpu_frequency_minimum: Option<Box<crate::models::V0Period0Period39Uint32NoVal>>,
    #[serde(rename = "cpu_frequency_maximum", skip_serializing_if = "Option::is_none")]
    pub cpu_frequency_maximum: Option<Box<crate::models::V0Period0Period39Uint32NoVal>>,
    #[serde(rename = "cpu_frequency_governor", skip_serializing_if = "Option::is_none")]
    pub cpu_frequency_governor: Option<Box<crate::models::V0Period0Period39Uint32NoVal>>,
    #[serde(rename = "cpus_per_tres", skip_serializing_if = "Option::is_none")]
    pub cpus_per_tres: Option<String>,
    #[serde(rename = "cron", skip_serializing_if = "Option::is_none")]
    pub cron: Option<String>,
    #[serde(rename = "deadline", skip_serializing_if = "Option::is_none")]
    pub deadline: Option<i64>,
    #[serde(rename = "delay_boot", skip_serializing_if = "Option::is_none")]
    pub delay_boot: Option<Box<crate::models::V0Period0Period39Uint32NoVal>>,
    #[serde(rename = "dependency", skip_serializing_if = "Option::is_none")]
    pub dependency: Option<String>,
    #[serde(rename = "derived_exit_code", skip_serializing_if = "Option::is_none")]
    pub derived_exit_code: Option<i32>,
    #[serde(rename = "eligible_time", skip_serializing_if = "Option::is_none")]
    pub eligible_time: Option<i64>,
    #[serde(rename = "end_time", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<i64>,
    #[serde(rename = "excluded_nodes", skip_serializing_if = "Option::is_none")]
    pub excluded_nodes: Option<String>,
    #[serde(rename = "exit_code", skip_serializing_if = "Option::is_none")]
    pub exit_code: Option<i32>,
    #[serde(rename = "extra", skip_serializing_if = "Option::is_none")]
    pub extra: Option<String>,
    #[serde(rename = "failed_node", skip_serializing_if = "Option::is_none")]
    pub failed_node: Option<String>,
    #[serde(rename = "features", skip_serializing_if = "Option::is_none")]
    pub features: Option<String>,
    #[serde(rename = "federation_origin", skip_serializing_if = "Option::is_none")]
    pub federation_origin: Option<String>,
    #[serde(rename = "federation_siblings_active", skip_serializing_if = "Option::is_none")]
    pub federation_siblings_active: Option<String>,
    #[serde(rename = "federation_siblings_viable", skip_serializing_if = "Option::is_none")]
    pub federation_siblings_viable: Option<String>,
    #[serde(rename = "gres_detail", skip_serializing_if = "Option::is_none")]
    pub gres_detail: Option<Vec<String>>,
    #[serde(rename = "group_id", skip_serializing_if = "Option::is_none")]
    pub group_id: Option<i32>,
    #[serde(rename = "group_name", skip_serializing_if = "Option::is_none")]
    pub group_name: Option<String>,
    #[serde(rename = "het_job_id", skip_serializing_if = "Option::is_none")]
    pub het_job_id: Option<Box<crate::models::V0Period0Period39Uint32NoVal>>,
    #[serde(rename = "het_job_id_set", skip_serializing_if = "Option::is_none")]
    pub het_job_id_set: Option<String>,
    #[serde(rename = "het_job_offset", skip_serializing_if = "Option::is_none")]
    pub het_job_offset: Option<Box<crate::models::V0Period0Period39Uint32NoVal>>,
    #[serde(rename = "job_id", skip_serializing_if = "Option::is_none")]
    pub job_id: Option<i32>,
    #[serde(rename = "job_resources", skip_serializing_if = "Option::is_none")]
    pub job_resources: Option<Box<crate::models::V0Period0Period39JobRes>>,
    #[serde(rename = "job_size_str", skip_serializing_if = "Option::is_none")]
    pub job_size_str: Option<Vec<String>>,
    #[serde(rename = "job_state", skip_serializing_if = "Option::is_none")]
    pub job_state: Option<String>,
    #[serde(rename = "last_sched_evaluation", skip_serializing_if = "Option::is_none")]
    pub last_sched_evaluation: Option<i64>,
    #[serde(rename = "licenses", skip_serializing_if = "Option::is_none")]
    pub licenses: Option<String>,
    #[serde(rename = "mail_type", skip_serializing_if = "Option::is_none")]
    pub mail_type: Option<Vec<MailType>>,
    #[serde(rename = "mail_user", skip_serializing_if = "Option::is_none")]
    pub mail_user: Option<String>,
    #[serde(rename = "max_cpus", skip_serializing_if = "Option::is_none")]
    pub max_cpus: Option<Box<crate::models::V0Period0Period39Uint32NoVal>>,
    #[serde(rename = "max_nodes", skip_serializing_if = "Option::is_none")]
    pub max_nodes: Option<Box<crate::models::V0Period0Period39Uint32NoVal>>,
    #[serde(rename = "mcs_label", skip_serializing_if = "Option::is_none")]
    pub mcs_label: Option<String>,
    #[serde(rename = "memory_per_tres", skip_serializing_if = "Option::is_none")]
    pub memory_per_tres: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "network", skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    #[serde(rename = "nodes", skip_serializing_if = "Option::is_none")]
    pub nodes: Option<String>,
    #[serde(rename = "nice", skip_serializing_if = "Option::is_none")]
    pub nice: Option<i32>,
    #[serde(rename = "tasks_per_core", skip_serializing_if = "Option::is_none")]
    pub tasks_per_core: Option<Box<crate::models::V0Period0Period39Uint16NoVal>>,
    #[serde(rename = "tasks_per_tres", skip_serializing_if = "Option::is_none")]
    pub tasks_per_tres: Option<Box<crate::models::V0Period0Period39Uint16NoVal>>,
    #[serde(rename = "tasks_per_node", skip_serializing_if = "Option::is_none")]
    pub tasks_per_node: Option<Box<crate::models::V0Period0Period39Uint16NoVal>>,
    #[serde(rename = "tasks_per_socket", skip_serializing_if = "Option::is_none")]
    pub tasks_per_socket: Option<Box<crate::models::V0Period0Period39Uint16NoVal>>,
    #[serde(rename = "tasks_per_board", skip_serializing_if = "Option::is_none")]
    pub tasks_per_board: Option<Box<crate::models::V0Period0Period39Uint16NoVal>>,
    #[serde(rename = "cpus", skip_serializing_if = "Option::is_none")]
    pub cpus: Option<Box<crate::models::V0Period0Period39Uint32NoVal>>,
    #[serde(rename = "node_count", skip_serializing_if = "Option::is_none")]
    pub node_count: Option<Box<crate::models::V0Period0Period39Uint32NoVal>>,
    #[serde(rename = "tasks", skip_serializing_if = "Option::is_none")]
    pub tasks: Option<Box<crate::models::V0Period0Period39Uint32NoVal>>,
    #[serde(rename = "partition", skip_serializing_if = "Option::is_none")]
    pub partition: Option<String>,
    #[serde(rename = "prefer", skip_serializing_if = "Option::is_none")]
    pub prefer: Option<String>,
    #[serde(rename = "memory_per_cpu", skip_serializing_if = "Option::is_none")]
    pub memory_per_cpu: Option<Box<crate::models::V0Period0Period39Uint64NoVal>>,
    #[serde(rename = "memory_per_node", skip_serializing_if = "Option::is_none")]
    pub memory_per_node: Option<Box<crate::models::V0Period0Period39Uint64NoVal>>,
    #[serde(rename = "minimum_cpus_per_node", skip_serializing_if = "Option::is_none")]
    pub minimum_cpus_per_node: Option<Box<crate::models::V0Period0Period39Uint16NoVal>>,
    #[serde(rename = "minimum_tmp_disk_per_node", skip_serializing_if = "Option::is_none")]
    pub minimum_tmp_disk_per_node: Option<Box<crate::models::V0Period0Period39Uint32NoVal>>,
    #[serde(rename = "power", skip_serializing_if = "Option::is_none")]
    pub power: Option<Box<crate::models::V0039JobInfoPower>>,
    #[serde(rename = "preempt_time", skip_serializing_if = "Option::is_none")]
    pub preempt_time: Option<i64>,
    #[serde(rename = "preemptable_time", skip_serializing_if = "Option::is_none")]
    pub preemptable_time: Option<i64>,
    #[serde(rename = "pre_sus_time", skip_serializing_if = "Option::is_none")]
    pub pre_sus_time: Option<i64>,
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<Box<crate::models::V0Period0Period39Uint32NoVal>>,
    #[serde(rename = "profile", skip_serializing_if = "Option::is_none")]
    pub profile: Option<Vec<Profile>>,
    #[serde(rename = "qos", skip_serializing_if = "Option::is_none")]
    pub qos: Option<String>,
    #[serde(rename = "reboot", skip_serializing_if = "Option::is_none")]
    pub reboot: Option<bool>,
    #[serde(rename = "required_nodes", skip_serializing_if = "Option::is_none")]
    pub required_nodes: Option<String>,
    #[serde(rename = "minimum_switches", skip_serializing_if = "Option::is_none")]
    pub minimum_switches: Option<i32>,
    #[serde(rename = "requeue", skip_serializing_if = "Option::is_none")]
    pub requeue: Option<bool>,
    #[serde(rename = "resize_time", skip_serializing_if = "Option::is_none")]
    pub resize_time: Option<i64>,
    #[serde(rename = "restart_cnt", skip_serializing_if = "Option::is_none")]
    pub restart_cnt: Option<i32>,
    #[serde(rename = "resv_name", skip_serializing_if = "Option::is_none")]
    pub resv_name: Option<String>,
    #[serde(rename = "scheduled_nodes", skip_serializing_if = "Option::is_none")]
    pub scheduled_nodes: Option<String>,
    #[serde(rename = "selinux_context", skip_serializing_if = "Option::is_none")]
    pub selinux_context: Option<String>,
    #[serde(rename = "shared", skip_serializing_if = "Option::is_none")]
    pub shared: Option<Vec<Shared>>,
    #[serde(rename = "exclusive", skip_serializing_if = "Option::is_none")]
    pub exclusive: Option<Vec<Exclusive>>,
    #[serde(rename = "show_flags", skip_serializing_if = "Option::is_none")]
    pub show_flags: Option<Vec<ShowFlags>>,
    #[serde(rename = "sockets_per_board", skip_serializing_if = "Option::is_none")]
    pub sockets_per_board: Option<i32>,
    #[serde(rename = "sockets_per_node", skip_serializing_if = "Option::is_none")]
    pub sockets_per_node: Option<Box<crate::models::V0Period0Period39Uint16NoVal>>,
    #[serde(rename = "start_time", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<i64>,
    #[serde(rename = "state_description", skip_serializing_if = "Option::is_none")]
    pub state_description: Option<String>,
    #[serde(rename = "state_reason", skip_serializing_if = "Option::is_none")]
    pub state_reason: Option<String>,
    #[serde(rename = "standard_error", skip_serializing_if = "Option::is_none")]
    pub standard_error: Option<String>,
    #[serde(rename = "standard_input", skip_serializing_if = "Option::is_none")]
    pub standard_input: Option<String>,
    #[serde(rename = "standard_output", skip_serializing_if = "Option::is_none")]
    pub standard_output: Option<String>,
    #[serde(rename = "submit_time", skip_serializing_if = "Option::is_none")]
    pub submit_time: Option<i64>,
    #[serde(rename = "suspend_time", skip_serializing_if = "Option::is_none")]
    pub suspend_time: Option<i64>,
    #[serde(rename = "system_comment", skip_serializing_if = "Option::is_none")]
    pub system_comment: Option<String>,
    #[serde(rename = "time_limit", skip_serializing_if = "Option::is_none")]
    pub time_limit: Option<Box<crate::models::V0Period0Period39Uint32NoVal>>,
    #[serde(rename = "time_minimum", skip_serializing_if = "Option::is_none")]
    pub time_minimum: Option<Box<crate::models::V0Period0Period39Uint32NoVal>>,
    #[serde(rename = "threads_per_core", skip_serializing_if = "Option::is_none")]
    pub threads_per_core: Option<Box<crate::models::V0Period0Period39Uint16NoVal>>,
    #[serde(rename = "tres_bind", skip_serializing_if = "Option::is_none")]
    pub tres_bind: Option<String>,
    #[serde(rename = "tres_freq", skip_serializing_if = "Option::is_none")]
    pub tres_freq: Option<String>,
    #[serde(rename = "tres_per_job", skip_serializing_if = "Option::is_none")]
    pub tres_per_job: Option<String>,
    #[serde(rename = "tres_per_node", skip_serializing_if = "Option::is_none")]
    pub tres_per_node: Option<String>,
    #[serde(rename = "tres_per_socket", skip_serializing_if = "Option::is_none")]
    pub tres_per_socket: Option<String>,
    #[serde(rename = "tres_per_task", skip_serializing_if = "Option::is_none")]
    pub tres_per_task: Option<String>,
    #[serde(rename = "tres_req_str", skip_serializing_if = "Option::is_none")]
    pub tres_req_str: Option<String>,
    #[serde(rename = "tres_alloc_str", skip_serializing_if = "Option::is_none")]
    pub tres_alloc_str: Option<String>,
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<i32>,
    #[serde(rename = "user_name", skip_serializing_if = "Option::is_none")]
    pub user_name: Option<String>,
    #[serde(rename = "maximum_switch_wait_time", skip_serializing_if = "Option::is_none")]
    pub maximum_switch_wait_time: Option<i32>,
    #[serde(rename = "wckey", skip_serializing_if = "Option::is_none")]
    pub wckey: Option<String>,
    #[serde(rename = "current_working_directory", skip_serializing_if = "Option::is_none")]
    pub current_working_directory: Option<String>,
}

impl V0Period0Period39JobInfo {
    pub fn new() -> V0Period0Period39JobInfo {
        V0Period0Period39JobInfo {
            account: None,
            accrue_time: None,
            admin_comment: None,
            allocating_node: None,
            array_job_id: None,
            array_task_id: None,
            array_max_tasks: None,
            array_task_string: None,
            association_id: None,
            batch_features: None,
            batch_flag: None,
            batch_host: None,
            flags: None,
            burst_buffer: None,
            burst_buffer_state: None,
            cluster: None,
            cluster_features: None,
            command: None,
            comment: None,
            container: None,
            container_id: None,
            contiguous: None,
            core_spec: None,
            thread_spec: None,
            cores_per_socket: None,
            billable_tres: None,
            cpus_per_task: None,
            cpu_frequency_minimum: None,
            cpu_frequency_maximum: None,
            cpu_frequency_governor: None,
            cpus_per_tres: None,
            cron: None,
            deadline: None,
            delay_boot: None,
            dependency: None,
            derived_exit_code: None,
            eligible_time: None,
            end_time: None,
            excluded_nodes: None,
            exit_code: None,
            extra: None,
            failed_node: None,
            features: None,
            federation_origin: None,
            federation_siblings_active: None,
            federation_siblings_viable: None,
            gres_detail: None,
            group_id: None,
            group_name: None,
            het_job_id: None,
            het_job_id_set: None,
            het_job_offset: None,
            job_id: None,
            job_resources: None,
            job_size_str: None,
            job_state: None,
            last_sched_evaluation: None,
            licenses: None,
            mail_type: None,
            mail_user: None,
            max_cpus: None,
            max_nodes: None,
            mcs_label: None,
            memory_per_tres: None,
            name: None,
            network: None,
            nodes: None,
            nice: None,
            tasks_per_core: None,
            tasks_per_tres: None,
            tasks_per_node: None,
            tasks_per_socket: None,
            tasks_per_board: None,
            cpus: None,
            node_count: None,
            tasks: None,
            partition: None,
            prefer: None,
            memory_per_cpu: None,
            memory_per_node: None,
            minimum_cpus_per_node: None,
            minimum_tmp_disk_per_node: None,
            power: None,
            preempt_time: None,
            preemptable_time: None,
            pre_sus_time: None,
            priority: None,
            profile: None,
            qos: None,
            reboot: None,
            required_nodes: None,
            minimum_switches: None,
            requeue: None,
            resize_time: None,
            restart_cnt: None,
            resv_name: None,
            scheduled_nodes: None,
            selinux_context: None,
            shared: None,
            exclusive: None,
            show_flags: None,
            sockets_per_board: None,
            sockets_per_node: None,
            start_time: None,
            state_description: None,
            state_reason: None,
            standard_error: None,
            standard_input: None,
            standard_output: None,
            submit_time: None,
            suspend_time: None,
            system_comment: None,
            time_limit: None,
            time_minimum: None,
            threads_per_core: None,
            tres_bind: None,
            tres_freq: None,
            tres_per_job: None,
            tres_per_node: None,
            tres_per_socket: None,
            tres_per_task: None,
            tres_req_str: None,
            tres_alloc_str: None,
            user_id: None,
            user_name: None,
            maximum_switch_wait_time: None,
            wckey: None,
            current_working_directory: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Flags {
    #[serde(rename = "KILL_INVALID_DEPENDENCY")]
    KillInvalidDependency,
    #[serde(rename = "NO_KILL_INVALID_DEPENDENCY")]
    NoKillInvalidDependency,
    #[serde(rename = "HAS_STATE_DIRECTORY")]
    HasStateDirectory,
    #[serde(rename = "TESTING_BACKFILL")]
    TestingBackfill,
    #[serde(rename = "GRES_BINDING_ENFORCED")]
    GresBindingEnforced,
    #[serde(rename = "TEST_NOW_ONLY")]
    TestNowOnly,
    #[serde(rename = "SEND_JOB_ENVIRONMENT")]
    SendJobEnvironment,
    #[serde(rename = "SPREAD_JOB")]
    SpreadJob,
    #[serde(rename = "PREFER_MINIMUM_NODE_COUNT")]
    PreferMinimumNodeCount,
    #[serde(rename = "JOB_KILL_HURRY")]
    JobKillHurry,
    #[serde(rename = "SKIP_TRES_STRING_ACCOUNTING")]
    SkipTresStringAccounting,
    #[serde(rename = "SIBLING_CLUSTER_UPDATE_ONLY")]
    SiblingClusterUpdateOnly,
    #[serde(rename = "HETEROGENEOUS_JOB")]
    HeterogeneousJob,
    #[serde(rename = "EXACT_TASK_COUNT_REQUESTED")]
    ExactTaskCountRequested,
    #[serde(rename = "EXACT_CPU_COUNT_REQUESTED")]
    ExactCpuCountRequested,
    #[serde(rename = "TESTING_WHOLE_NODE_BACKFILL")]
    TestingWholeNodeBackfill,
    #[serde(rename = "TOP_PRIORITY_JOB")]
    TopPriorityJob,
    #[serde(rename = "ACCRUE_COUNT_CLEARED")]
    AccrueCountCleared,
    #[serde(rename = "GRED_BINDING_DISABLED")]
    GredBindingDisabled,
    #[serde(rename = "JOB_WAS_RUNNING")]
    JobWasRunning,
    #[serde(rename = "JOB_ACCRUE_TIME_RESET")]
    JobAccrueTimeReset,
    #[serde(rename = "CRON_JOB")]
    CronJob,
    #[serde(rename = "EXACT_MEMORY_REQUESTED")]
    ExactMemoryRequested,
    #[serde(rename = "JOB_RESIZED")]
    JobResized,
    #[serde(rename = "USING_DEFAULT_ACCOUNT")]
    UsingDefaultAccount,
    #[serde(rename = "USING_DEFAULT_PARTITION")]
    UsingDefaultPartition,
    #[serde(rename = "USING_DEFAULT_QOS")]
    UsingDefaultQos,
    #[serde(rename = "USING_DEFAULT_WCKEY")]
    UsingDefaultWckey,
    #[serde(rename = "DEPENDENT")]
    Dependent,
    #[serde(rename = "MAGNETIC")]
    Magnetic,
    #[serde(rename = "PARTITION_ASSIGNED")]
    PartitionAssigned,
    #[serde(rename = "BACKFILL_ATTEMPTED")]
    BackfillAttempted,
    #[serde(rename = "SCHEDULING_ATTEMPTED")]
    SchedulingAttempted,
    #[serde(rename = "SAVE_BATCH_SCRIPT")]
    SaveBatchScript,
}

impl Default for Flags {
    fn default() -> Flags {
        Self::KillInvalidDependency
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MailType {
    #[serde(rename = "BEGIN")]
    Begin,
    #[serde(rename = "END")]
    End,
    #[serde(rename = "FAIL")]
    Fail,
    #[serde(rename = "REQUEUE")]
    Requeue,
    #[serde(rename = "TIME=100%")]
    TimeEqual100Percent,
    #[serde(rename = "TIME=90%")]
    TimeEqual90Percent,
    #[serde(rename = "TIME=80%")]
    TimeEqual80Percent,
    #[serde(rename = "TIME=50%")]
    TimeEqual50Percent,
    #[serde(rename = "STAGE_OUT")]
    StageOut,
    #[serde(rename = "ARRAY_TASKS")]
    ArrayTasks,
    #[serde(rename = "INVALID_DEPENDENCY")]
    InvalidDependency,
}

impl Default for MailType {
    fn default() -> MailType {
        Self::Begin
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Profile {
    #[serde(rename = "NOT_SET")]
    NotSet,
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "ENERGY")]
    Energy,
    #[serde(rename = "LUSTRE")]
    Lustre,
    #[serde(rename = "NETWORK")]
    Network,
    #[serde(rename = "TASK")]
    Task,
}

impl Default for Profile {
    fn default() -> Profile {
        Self::NotSet
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Shared {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "oversubscribe")]
    Oversubscribe,
    #[serde(rename = "user")]
    User,
    #[serde(rename = "mcs")]
    Mcs,
}

impl Default for Shared {
    fn default() -> Shared {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Exclusive {
    #[serde(rename = "true")]
    True,
    #[serde(rename = "false")]
    False,
    #[serde(rename = "user")]
    User,
    #[serde(rename = "mcs")]
    Mcs,
}

impl Default for Exclusive {
    fn default() -> Exclusive {
        Self::True
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ShowFlags {
    #[serde(rename = "ALL")]
    All,
    #[serde(rename = "DETAIL")]
    Detail,
    #[serde(rename = "MIXED")]
    Mixed,
    #[serde(rename = "LOCAL")]
    Local,
    #[serde(rename = "SIBLING")]
    Sibling,
    #[serde(rename = "FEDERATION")]
    Federation,
    #[serde(rename = "FUTURE")]
    Future,
}

impl Default for ShowFlags {
    fn default() -> ShowFlags {
        Self::All
    }
}

