/*
 * Slurm Rest API
 *
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.39
 * Contact: sales@schedmd.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct V0Period0Period39ClusterRec {
    #[serde(rename = "controller", skip_serializing_if = "Option::is_none")]
    pub controller: Option<Box<crate::models::V0039ClusterRecController>>,
    #[serde(rename = "flags", skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<Flags>>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "nodes", skip_serializing_if = "Option::is_none")]
    pub nodes: Option<String>,
    #[serde(rename = "select_plugin", skip_serializing_if = "Option::is_none")]
    pub select_plugin: Option<String>,
    #[serde(rename = "associations", skip_serializing_if = "Option::is_none")]
    pub associations: Option<Box<crate::models::V0039ClusterRecAssociations>>,
    #[serde(rename = "rpc_version", skip_serializing_if = "Option::is_none")]
    pub rpc_version: Option<i32>,
    #[serde(rename = "tres", skip_serializing_if = "Option::is_none")]
    pub tres: Option<Vec<crate::models::V0Period0Period39Tres>>,
}

impl V0Period0Period39ClusterRec {
    pub fn new() -> V0Period0Period39ClusterRec {
        V0Period0Period39ClusterRec {
            controller: None,
            flags: None,
            name: None,
            nodes: None,
            select_plugin: None,
            associations: None,
            rpc_version: None,
            tres: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Flags {
    #[serde(rename = "REGISTERING")]
    Registering,
    #[serde(rename = "MULTIPLE_SLURMD")]
    MultipleSlurmd,
    #[serde(rename = "FRONT_END")]
    FrontEnd,
    #[serde(rename = "CRAY_NATIVE")]
    CrayNative,
    #[serde(rename = "FEDERATION")]
    Federation,
    #[serde(rename = "EXTERNAL")]
    External,
}

impl Default for Flags {
    fn default() -> Flags {
        Self::Registering
    }
}

