/*
 * Slurm Rest API
 *
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.39
 * Contact: sales@schedmd.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct V0Period0Period39CronEntry {
    #[serde(rename = "flags", skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<Flags>>,
    #[serde(rename = "minute", skip_serializing_if = "Option::is_none")]
    pub minute: Option<String>,
    #[serde(rename = "hour", skip_serializing_if = "Option::is_none")]
    pub hour: Option<String>,
    #[serde(rename = "day_of_month", skip_serializing_if = "Option::is_none")]
    pub day_of_month: Option<String>,
    #[serde(rename = "month", skip_serializing_if = "Option::is_none")]
    pub month: Option<String>,
    #[serde(rename = "day_of_week", skip_serializing_if = "Option::is_none")]
    pub day_of_week: Option<String>,
    #[serde(rename = "specification", skip_serializing_if = "Option::is_none")]
    pub specification: Option<String>,
    #[serde(rename = "command", skip_serializing_if = "Option::is_none")]
    pub command: Option<String>,
    #[serde(rename = "line", skip_serializing_if = "Option::is_none")]
    pub line: Option<Box<crate::models::V0039CronEntryLine>>,
}

impl V0Period0Period39CronEntry {
    pub fn new() -> V0Period0Period39CronEntry {
        V0Period0Period39CronEntry {
            flags: None,
            minute: None,
            hour: None,
            day_of_month: None,
            month: None,
            day_of_week: None,
            specification: None,
            command: None,
            line: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Flags {
    #[serde(rename = "WILD_MINUTE")]
    Minute,
    #[serde(rename = "WILD_HOUR")]
    Hour,
    #[serde(rename = "WILD_DAY_OF_MONTH")]
    DayOfMonth,
    #[serde(rename = "WILD_MONTH")]
    Month,
    #[serde(rename = "WILD_DAY_OF_WEEK")]
    DayOfWeek,
}

impl Default for Flags {
    fn default() -> Flags {
        Self::Minute
    }
}

