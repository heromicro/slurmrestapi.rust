/*
 * Slurm Rest API
 *
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.39
 * Contact: sales@schedmd.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct V0Period0Period39PartitionInfo {
    #[serde(rename = "nodes", skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Box<crate::models::V0039PartitionInfoNodes>>,
    #[serde(rename = "accounts", skip_serializing_if = "Option::is_none")]
    pub accounts: Option<Box<crate::models::V0039PartitionInfoAccounts>>,
    #[serde(rename = "groups", skip_serializing_if = "Option::is_none")]
    pub groups: Option<Box<crate::models::V0039PartitionInfoGroups>>,
    #[serde(rename = "qos", skip_serializing_if = "Option::is_none")]
    pub qos: Option<Box<crate::models::V0039PartitionInfoQos>>,
    #[serde(rename = "alternate", skip_serializing_if = "Option::is_none")]
    pub alternate: Option<String>,
    #[serde(rename = "tres", skip_serializing_if = "Option::is_none")]
    pub tres: Option<Box<crate::models::V0039PartitionInfoTres>>,
    #[serde(rename = "cluster", skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    #[serde(rename = "cpus", skip_serializing_if = "Option::is_none")]
    pub cpus: Option<Box<crate::models::V0039PartitionInfoNodes>>,
    #[serde(rename = "defaults", skip_serializing_if = "Option::is_none")]
    pub defaults: Option<Box<crate::models::V0039PartitionInfoDefaults>>,
    #[serde(rename = "grace_time", skip_serializing_if = "Option::is_none")]
    pub grace_time: Option<i32>,
    #[serde(rename = "maximums", skip_serializing_if = "Option::is_none")]
    pub maximums: Option<Box<crate::models::V0039PartitionInfoMaximums>>,
    #[serde(rename = "minimums", skip_serializing_if = "Option::is_none")]
    pub minimums: Option<Box<crate::models::V0039PartitionInfoMinimums>>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "node_sets", skip_serializing_if = "Option::is_none")]
    pub node_sets: Option<String>,
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<Box<crate::models::V0039PartitionInfoPriority>>,
    #[serde(rename = "timeouts", skip_serializing_if = "Option::is_none")]
    pub timeouts: Option<Box<crate::models::V0039PartitionInfoTimeouts>>,
    #[serde(rename = "suspend_time", skip_serializing_if = "Option::is_none")]
    pub suspend_time: Option<Box<crate::models::V0Period0Period39Uint32NoVal>>,
}

impl V0Period0Period39PartitionInfo {
    pub fn new() -> V0Period0Period39PartitionInfo {
        V0Period0Period39PartitionInfo {
            nodes: None,
            accounts: None,
            groups: None,
            qos: None,
            alternate: None,
            tres: None,
            cluster: None,
            cpus: None,
            defaults: None,
            grace_time: None,
            maximums: None,
            minimums: None,
            name: None,
            node_sets: None,
            priority: None,
            timeouts: None,
            suspend_time: None,
        }
    }
}


