/*
 * Slurm Rest API
 *
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.37
 * Contact: sales@schedmd.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct V0Period0Period37Ping {
    /// slurm controller hostname
    #[serde(rename = "hostname", skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    /// slurm controller host up
    #[serde(rename = "ping", skip_serializing_if = "Option::is_none")]
    pub ping: Option<Ping>,
    /// slurm controller mode
    #[serde(rename = "mode", skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    /// slurm controller status
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<i32>,
}

impl V0Period0Period37Ping {
    pub fn new() -> V0Period0Period37Ping {
        V0Period0Period37Ping {
            hostname: None,
            ping: None,
            mode: None,
            status: None,
        }
    }
}

/// slurm controller host up
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Ping {
    #[serde(rename = "UP")]
    Up,
    #[serde(rename = "DOWN")]
    Down,
}

impl Default for Ping {
    fn default() -> Ping {
        Self::Up
    }
}

