/*
 * Slurm Rest API
 *
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.39
 * Contact: sales@schedmd.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct V0Period0Period39ReservationInfo {
    #[serde(rename = "accounts", skip_serializing_if = "Option::is_none")]
    pub accounts: Option<String>,
    #[serde(rename = "burst_buffer", skip_serializing_if = "Option::is_none")]
    pub burst_buffer: Option<String>,
    #[serde(rename = "core_count", skip_serializing_if = "Option::is_none")]
    pub core_count: Option<i32>,
    #[serde(rename = "core_specializations", skip_serializing_if = "Option::is_none")]
    pub core_specializations: Option<Vec<crate::models::V0Period0Period39ReservationCoreSpec>>,
    #[serde(rename = "end_time", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<i64>,
    #[serde(rename = "features", skip_serializing_if = "Option::is_none")]
    pub features: Option<String>,
    #[serde(rename = "flags", skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<Flags>>,
    #[serde(rename = "groups", skip_serializing_if = "Option::is_none")]
    pub groups: Option<String>,
    #[serde(rename = "licenses", skip_serializing_if = "Option::is_none")]
    pub licenses: Option<String>,
    #[serde(rename = "max_start_delay", skip_serializing_if = "Option::is_none")]
    pub max_start_delay: Option<i32>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "node_count", skip_serializing_if = "Option::is_none")]
    pub node_count: Option<i32>,
    #[serde(rename = "node_list", skip_serializing_if = "Option::is_none")]
    pub node_list: Option<String>,
    #[serde(rename = "partition", skip_serializing_if = "Option::is_none")]
    pub partition: Option<String>,
    #[serde(rename = "purge_completed", skip_serializing_if = "Option::is_none")]
    pub purge_completed: Option<Box<crate::models::V0039ReservationInfoPurgeCompleted>>,
    #[serde(rename = "start_time", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<i64>,
    #[serde(rename = "watts", skip_serializing_if = "Option::is_none")]
    pub watts: Option<Box<crate::models::V0Period0Period39Uint32NoVal>>,
    #[serde(rename = "tres", skip_serializing_if = "Option::is_none")]
    pub tres: Option<String>,
    #[serde(rename = "users", skip_serializing_if = "Option::is_none")]
    pub users: Option<String>,
}

impl V0Period0Period39ReservationInfo {
    pub fn new() -> V0Period0Period39ReservationInfo {
        V0Period0Period39ReservationInfo {
            accounts: None,
            burst_buffer: None,
            core_count: None,
            core_specializations: None,
            end_time: None,
            features: None,
            flags: None,
            groups: None,
            licenses: None,
            max_start_delay: None,
            name: None,
            node_count: None,
            node_list: None,
            partition: None,
            purge_completed: None,
            start_time: None,
            watts: None,
            tres: None,
            users: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Flags {
    #[serde(rename = "MAINT")]
    Maint,
    #[serde(rename = "NO_MAINT")]
    NoMaint,
    #[serde(rename = "DAILY")]
    Daily,
    #[serde(rename = "NO_DAILY")]
    NoDaily,
    #[serde(rename = "WEEKLY")]
    Weekly,
    #[serde(rename = "NO_WEEKLY")]
    NoWeekly,
    #[serde(rename = "IGNORE_JOBS")]
    IgnoreJobs,
    #[serde(rename = "NO_IGNORE_JOBS")]
    NoIgnoreJobs,
    #[serde(rename = "ANY_NODES")]
    AnyNodes,
    #[serde(rename = "STATIC")]
    Static,
    #[serde(rename = "NO_STATIC")]
    NoStatic,
    #[serde(rename = "PART_NODES")]
    PartNodes,
    #[serde(rename = "NO_PART_NODES")]
    NoPartNodes,
    #[serde(rename = "OVERLAP")]
    Overlap,
    #[serde(rename = "SPEC_NODES")]
    SpecNodes,
    #[serde(rename = "FIRST_CORES")]
    FirstCores,
    #[serde(rename = "TIME_FLOAT")]
    TimeFloat,
    #[serde(rename = "REPLACE")]
    Replace,
    #[serde(rename = "ALL_NODES")]
    AllNodes,
    #[serde(rename = "PURGE_COMP")]
    PurgeComp,
    #[serde(rename = "WEEKDAY")]
    Weekday,
    #[serde(rename = "NO_WEEKDAY")]
    NoWeekday,
    #[serde(rename = "WEEKEND")]
    Weekend,
    #[serde(rename = "NO_WEEKEND")]
    NoWeekend,
    #[serde(rename = "FLEX")]
    Flex,
    #[serde(rename = "NO_FLEX")]
    NoFlex,
    #[serde(rename = "DURATION_PLUS")]
    DurationPlus,
    #[serde(rename = "DURATION_MINUS")]
    DurationMinus,
    #[serde(rename = "NO_HOLD_JOBS_AFTER_END")]
    NoHoldJobsAfterEnd,
    #[serde(rename = "NO_PURGE_COMP")]
    NoPurgeComp,
    #[serde(rename = "MAGNETIC")]
    Magnetic,
    #[serde(rename = "SKIP")]
    Skip,
    #[serde(rename = "HOURLY")]
    Hourly,
    #[serde(rename = "NO_HOURLY")]
    NoHourly,
    #[serde(rename = "REOCCURRING")]
    Reoccurring,
}

impl Default for Flags {
    fn default() -> Flags {
        Self::Maint
    }
}

