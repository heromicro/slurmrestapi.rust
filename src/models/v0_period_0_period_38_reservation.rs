/*
 * Slurm Rest API
 *
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.38
 * Contact: sales@schedmd.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct V0Period0Period38Reservation {
    /// Allowed accounts
    #[serde(rename = "accounts", skip_serializing_if = "Option::is_none")]
    pub accounts: Option<String>,
    /// Reserved burst buffer
    #[serde(rename = "burst_buffer", skip_serializing_if = "Option::is_none")]
    pub burst_buffer: Option<String>,
    /// Number of reserved cores
    #[serde(rename = "core_count", skip_serializing_if = "Option::is_none")]
    pub core_count: Option<i32>,
    /// Number of reserved specialized cores
    #[serde(rename = "core_spec_cnt", skip_serializing_if = "Option::is_none")]
    pub core_spec_cnt: Option<i32>,
    /// End time of the reservation
    #[serde(rename = "end_time", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<i32>,
    /// List of features
    #[serde(rename = "features", skip_serializing_if = "Option::is_none")]
    pub features: Option<String>,
    /// Reservation options
    #[serde(rename = "flags", skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    /// List of groups permitted to use the reserved nodes
    #[serde(rename = "groups", skip_serializing_if = "Option::is_none")]
    pub groups: Option<String>,
    /// List of licenses
    #[serde(rename = "licenses", skip_serializing_if = "Option::is_none")]
    pub licenses: Option<String>,
    /// Maximum delay in which jobs outside of the reservation will be permitted to overlap once any jobs are queued for the reservation
    #[serde(rename = "max_start_delay", skip_serializing_if = "Option::is_none")]
    pub max_start_delay: Option<i32>,
    /// Reservationn name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Count of nodes reserved
    #[serde(rename = "node_count", skip_serializing_if = "Option::is_none")]
    pub node_count: Option<i32>,
    /// List of reserved nodes
    #[serde(rename = "node_list", skip_serializing_if = "Option::is_none")]
    pub node_list: Option<String>,
    /// Partition
    #[serde(rename = "partition", skip_serializing_if = "Option::is_none")]
    pub partition: Option<String>,
    #[serde(rename = "purge_completed", skip_serializing_if = "Option::is_none")]
    pub purge_completed: Option<Box<crate::models::V0038ReservationPurgeCompleted>>,
    /// Start time of reservation
    #[serde(rename = "start_time", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<i32>,
    /// amount of power to reserve in watts
    #[serde(rename = "watts", skip_serializing_if = "Option::is_none")]
    pub watts: Option<i32>,
    /// List of TRES
    #[serde(rename = "tres", skip_serializing_if = "Option::is_none")]
    pub tres: Option<String>,
    /// List of users
    #[serde(rename = "users", skip_serializing_if = "Option::is_none")]
    pub users: Option<String>,
}

impl V0Period0Period38Reservation {
    pub fn new() -> V0Period0Period38Reservation {
        V0Period0Period38Reservation {
            accounts: None,
            burst_buffer: None,
            core_count: None,
            core_spec_cnt: None,
            end_time: None,
            features: None,
            flags: None,
            groups: None,
            licenses: None,
            max_start_delay: None,
            name: None,
            node_count: None,
            node_list: None,
            partition: None,
            purge_completed: None,
            start_time: None,
            watts: None,
            tres: None,
            users: None,
        }
    }
}


