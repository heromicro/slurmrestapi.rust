/*
 * Slurm Rest API
 *
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.39
 * Contact: sales@schedmd.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct V0Period0Period39Qos {
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "flags", skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<Flags>>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "limits", skip_serializing_if = "Option::is_none")]
    pub limits: Option<Box<crate::models::V0039QosLimits>>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "preempt", skip_serializing_if = "Option::is_none")]
    pub preempt: Option<Box<crate::models::V0039QosPreempt>>,
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<i32>,
    #[serde(rename = "usage_factor", skip_serializing_if = "Option::is_none")]
    pub usage_factor: Option<Box<crate::models::V0Period0Period39Float64NoVal>>,
    #[serde(rename = "usage_threshold", skip_serializing_if = "Option::is_none")]
    pub usage_threshold: Option<Box<crate::models::V0Period0Period39Float64NoVal>>,
}

impl V0Period0Period39Qos {
    pub fn new() -> V0Period0Period39Qos {
        V0Period0Period39Qos {
            description: None,
            flags: None,
            id: None,
            limits: None,
            name: None,
            preempt: None,
            priority: None,
            usage_factor: None,
            usage_threshold: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Flags {
    #[serde(rename = "NOT_SET")]
    NotSet,
    #[serde(rename = "ADD")]
    Add,
    #[serde(rename = "REMOVE")]
    Remove,
    #[serde(rename = "PARTITION_MINIMUM_NODE")]
    PartitionMinimumNode,
    #[serde(rename = "PARTITION_MAXIMUM_NODE")]
    PartitionMaximumNode,
    #[serde(rename = "PARTITION_TIME_LIMIT")]
    PartitionTimeLimit,
    #[serde(rename = "ENFORCE_USAGE_THRESHOLD")]
    EnforceUsageThreshold,
    #[serde(rename = "NO_RESERVE")]
    NoReserve,
    #[serde(rename = "REQUIRED_RESERVATION")]
    RequiredReservation,
    #[serde(rename = "DENY_LIMIT")]
    DenyLimit,
    #[serde(rename = "OVERRIDE_PARTITION_QOS")]
    OverridePartitionQos,
    #[serde(rename = "NO_DECAY")]
    NoDecay,
    #[serde(rename = "USAGE_FACTOR_SAFE")]
    UsageFactorSafe,
}

impl Default for Flags {
    fn default() -> Flags {
        Self::NotSet
    }
}

